using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Zela.Services.Interface;

namespace Zela.Services
{
    public class ChatGPTService : IChatGPTService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        public ChatGPTService(HttpClient httpClient, IConfiguration config)
        {
            _httpClient = httpClient;
            _apiKey = config["OpenAI:ApiKey"];
        }
        public async Task<string> SummarizeAsync(string content)
        {
            var requestBody = new
            {
                model = "gpt-4",
                messages = new[]
                {
                    new { role = "system", content = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† gi√†u ng√¥n ng·ªØ c·∫£m x√∫c. " +
                                                     "H√£y ƒë·ªçc ƒëo·∫°n vƒÉn b·∫£n sau v√† t√≥m t·∫Øt n·ªôi dung m·ªôt c√°ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, m·∫°ch l·∫°c.\n\n" +
                                                     "üéØ **Y√™u c·∫ßu t√≥m t·∫Øt:**\n" +
                                                     "- T√≥m t·∫Øt r√µ r√†ng, c√≥ th·ªÉ chia ƒëo·∫°n n·∫øu c·∫ßn.\n" +
                                                     "- D√πng gi·ªçng vƒÉn m∆∞·ª£t m√†, truy·ªÅn c·∫£m, c√≥ chi·ªÅu s√¢u.\n" +
                                                     "- **B√¥i ƒë·∫≠m c√°c t·ª´ kh√≥a ch√≠nh ho·∫∑c c·ª•m √Ω quan tr·ªçng** (s·ª≠ d·ª•ng c√∫ ph√°p Markdown: `**t·ª´ kh√≥a**`).\n" +
                                                     "- Tr√°nh ƒë∆∞a ra ƒë√°nh gi√° ch·ªß quan, t·∫≠p trung v√†o vi·ªác truy·ªÅn t·∫£i th√¥ng tin c·ªët l√µi.\n\n" +
                                                     "üìå **Sau ph·∫ßn t√≥m t·∫Øt, h√£y tr√¨nh b√†y th√™m:**\n- " +
                                                     "‚úÖ Danh s√°ch ng·∫Øn g·ªçn (checklist) nh·ªØng ƒëi·ªÉm ch√≠nh ho·∫∑c h√†nh ƒë·ªông n√™n th·ª±c hi·ªán (n·∫øu c√≥).\n- " +
                                                     "üß† Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ph√π h·ª£p gi√∫p n·ªôi dung sinh ƒë·ªông v√† d·ªÖ ti·∫øp c·∫≠n h∆°n.\n- " +
                                                     "üìÑ T√≥m t·∫Øt n√™n tr√¨nh b√†y d∆∞·ªõi d·∫°ng Markdown ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã ƒë·∫πp m·∫Øt tr√™n web/chat." },
                    new { role = "user", content = $"H√£y t√≥m t·∫Øt n·ªôi dung sau:\n{content}" }
                },
                max_tokens = 650,
                temperature = 0.5
            };
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/chat/completions");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _apiKey);
            request.Content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            using var doc = JsonDocument.Parse(json);
            var summary = doc.RootElement
                .GetProperty("choices")[0]
                .GetProperty("message")
                .GetProperty("content")
                .GetString();
            return summary;
        }
    }
} 