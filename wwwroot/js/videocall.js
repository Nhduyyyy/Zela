// ======== C·∫§U H√åNH STUN/TURN ========
const ICE_SERVERS = [
    { urls: 'stun:stun.l.google.com:19302' },
    { urls: 'stun:stun1.l.google.com:19302' },
    { urls: 'stun:stun2.l.google.com:19302' },
    {
        urls: 'turn:YOUR_TURN_SERVER:3478',
        username: 'TURN_USERNAME',
        credential: 'TURN_CREDENTIAL'
    }
];

// ======== BI·∫æN TO√ÄN C·ª§C ========
let localStream;         // camera + mic
let screenStream = null; // stream chia s·∫ª m√†n h√¨nh
const peers = {};        // l∆∞u c√°c SimplePeer theo peerId
let connectionState = 'disconnected'; // Connection state tracking
let retryCount = 0;      // Retry counter
const MAX_RETRIES = 5;   // Maximum retry attempts
let currentUserId = null; // Current user ID for tracking

// ======== CONNECTION LOCK ========
let isConnecting = false; // Prevent race conditions

// ======== QUALITY CONTROL INTEGRATION ========
let qualityController = null; // Will be set from quality-control.js

// ======== ERROR TYPES ========
const ERROR_TYPES = {
    MEDIA_ACCESS_DENIED: 'MEDIA_ACCESS_DENIED',
    MEDIA_NOT_FOUND: 'MEDIA_NOT_FOUND',
    SIGNALR_CONNECTION_FAILED: 'SIGNALR_CONNECTION_FAILED',
    PEER_CONNECTION_FAILED: 'PEER_CONNECTION_FAILED',
    SCREEN_SHARE_FAILED: 'SCREEN_SHARE_FAILED',
    MEETING_NOT_FOUND: 'MEETING_NOT_FOUND',
    NETWORK_ERROR: 'NETWORK_ERROR'
};

// ======== ERROR MESSAGES ========
const ERROR_MESSAGES = {
    [ERROR_TYPES.MEDIA_ACCESS_DENIED]: 'Vui l√≤ng cho ph√©p truy c·∫≠p camera v√† microphone ƒë·ªÉ tham gia cu·ªôc h·ªçp.',
    [ERROR_TYPES.MEDIA_NOT_FOUND]: 'Kh√¥ng t√¨m th·∫•y camera ho·∫∑c microphone. Ki·ªÉm tra thi·∫øt b·ªã c·ªßa b·∫°n.',
    [ERROR_TYPES.SIGNALR_CONNECTION_FAILED]: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
    [ERROR_TYPES.PEER_CONNECTION_FAILED]: 'M·∫•t k·∫øt n·ªëi v·ªõi ng∆∞·ªùi tham gia kh√°c. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...',
    [ERROR_TYPES.SCREEN_SHARE_FAILED]: 'Kh√¥ng th·ªÉ chia s·∫ª m√†n h√¨nh. Th·ª≠ l·∫°i sau.',
    [ERROR_TYPES.MEETING_NOT_FOUND]: 'Ph√≤ng h·ªçp kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ k·∫øt th√∫c.',
    [ERROR_TYPES.NETWORK_ERROR]: 'L·ªói k·∫øt n·ªëi m·∫°ng. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...'
};

// ======== KH·ªûI T·∫†O K·∫æT N·ªêI SIGNALR ========
const connection = new signalR.HubConnectionBuilder()
    .withUrl('/meetingHub')
    .withAutomaticReconnect([0, 2000, 10000, 30000])
    .build();

// Expose connection globally for other components
window.connection = connection;

/**
 * L·∫•y User-ID c·ªßa ng∆∞·ªùi ƒëang truy c·∫≠p cho ph·∫ßn video-call.
 * ∆Øu ti√™n l·∫•y t·ª´ DOM ‚Üí sessionStorage ‚Üí sinh t·∫°m (fallback).
 *
 * Tr·∫£ v·ªÅ: Number (userId)
 */
function getCurrentUserId() {
    // 1Ô∏è‚É£  ∆ØU TI√äN L·∫§Y T·ª™ DOM (do server Razor render)
    //    V√≠ d·ª• Room.cshtml c√≥:
    //      <body data-user-id="@User.Id"> 
    const userIdElement = document.querySelector('[data-user-id]');
    if (userIdElement) {
        return parseInt(userIdElement.getAttribute('data-user-id'));
    }

    // 2Ô∏è‚É£  TH·ª¨ L·∫§Y T·ª™ sessionStorage (ƒë√£ l∆∞u khi login/page tr∆∞·ªõc)
    const sessionUserId = sessionStorage.getItem('userId');
    if (sessionUserId) {
        return parseInt(sessionUserId);
    }

    // 3Ô∏è‚É£  FALLBACK: KH√îNG T√åM TH·∫§Y ‚Üí T·∫†O ID T·∫†M (client-only)
    //    Kh√¥ng d√πng cho production v√¨:
    //      ‚Ä¢ Kh√¥ng tr√πng kh·ªõp DB
    //      ‚Ä¢ M·∫•t khi reload
    console.warn('User ID not found, using temporary ID');
    return Math.floor(Math.random() * 1000000);  // ‚Üê ID t·∫°m (0‚Äì999 999)
}

// ======================================================
// ===============  UI HELPERS ‚Äì LOADING  ===============
// ======================================================
/**
 * Hi·ªÉn th·ªã overlay loading ·ªü gi·ªØa m√†n h√¨nh.
 * @param {string} message - Th√¥ng b√°o hi·ªÉn th·ªã d∆∞·ªõi spinner (m·∫∑c ƒë·ªãnh: "ƒêang t·∫£i...")
 */
function showLoading(message = 'ƒêang t·∫£i...') {
    // T√¨m overlay ƒë√£ c√≥ s·∫µn trong DOM; n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi.
    //  - ∆Øu ti√™n d√πng template HTML (n·∫øu Room.cshtml ƒë√£ render s·∫µn)
    //  - N·∫øu kh√¥ng t√¨m th·∫•y => fallback sang h√†m createLoadingOverlay()
    const loadingDiv = document.getElementById('videocall-loading-overlay') || createLoadingOverlay();

    // C·∫≠p nh·∫≠t n·ªôi dung th√¥ng b√°o m·ªói l·∫ßn hi·ªÉn th·ªã
    loadingDiv.querySelector('.videocall-loading-message').textContent = message;

    // Hi·ªÉn th·ªã overlay (flex gi√∫p cƒÉn gi·ªØa spinner + text)
    loadingDiv.style.display = 'flex';
}

/**
 * ·∫®n overlay loading n·∫øu ƒëang hi·ªÉn th·ªã.
 * L∆∞u √Ω: ch·ªâ ·∫©n (`display: none`) ch·ª© kh√¥ng xo√° kh·ªèi DOM,
 *        ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng ngay.
 */
function hideLoading() {
    const loadingDiv = document.getElementById('videocall-loading-overlay');
    if (loadingDiv) {
        loadingDiv.style.display = 'none';
    }
}

/**
 * T·∫°o overlay loading m·ªõi (ch·ªâ g·ªçi khi kh√¥ng t√¨m th·∫•y element trong DOM).
 * Tr·∫£ v·ªÅ element v·ª´a t·∫°o ƒë·ªÉ h√†m g·ªçi c√≥ th·ªÉ ti·∫øp t·ª•c thao t√°c.
 */
function createLoadingOverlay() {
    // 1Ô∏è‚É£  T·∫°o ph·∫ßn t·ª≠ container
    const overlay = document.createElement('div');
    overlay.id = 'videocall-loading-overlay';
    overlay.className = 'videocall-loading-overlay';

    // 2Ô∏è‚É£  B∆°m HTML b√™n trong: spinner + message
    overlay.innerHTML = `
        <div class="videocall-loading-content">
            <div class="videocall-loading-spinner"></div>
            <div class="videocall-loading-message">ƒêang t·∫£i...</div>
        </div>
    `;

    // Ch·ªâ set display, kh√¥ng set style kh√°c
    overlay.style.display = 'flex';
    // 4Ô∏è‚É£  G·∫Øn overlay v√†o cu·ªëi <body>
    document.body.appendChild(overlay);
    // 5Ô∏è‚É£  Tr·∫£ v·ªÅ element ƒë·ªÉ caller c√≥ th·ªÉ s·ª≠ d·ª•ng ngay
    return overlay;
}

// ======================================================
// ============  UI HELPERS ‚Äì ERROR NOTIFICATION ========
// ======================================================

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o l·ªói (toast) ·ªü g√≥c ph·∫£i tr√™n m√†n h√¨nh.
 *
 * @param {string}  message      - N·ªôi dung l·ªói c·∫ßn hi·ªÉn th·ªã.
 * @param {boolean} isTemporary  - N·∫øu true, t·ª± ƒë·ªông ·∫©n sau 5 s.
 */
function showError(message, isTemporary = false) {
    // 1Ô∏è‚É£  T√¨m div th√¥ng b√°o ƒë√£ c√≥; n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi (lazy-create)
    const errorDiv = document.getElementById('error-notification') || createErrorNotification();
    // 2Ô∏è‚É£  C·∫≠p nh·∫≠t n·ªôi dung l·ªói
    errorDiv.querySelector('.error-message').textContent = message;
    // 3Ô∏è‚É£  Hi·ªÉn th·ªã (block = inline-block v·ªõi chi·ªÅu r·ªông t·ª± ƒë·ªông)
    errorDiv.style.display = 'block';
    // 4Ô∏è‚É£  N·∫øu t·∫°m th·ªùi ‚ûú t·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    if (isTemporary) {
        setTimeout(() => hideError(), 5000);
    }
}

/**
 * ·∫®n th√¥ng b√°o l·ªói n·∫øu ƒëang hi·ªÉn th·ªã.
 * Kh√¥ng xo√° kh·ªèi DOM ‚Äì gi·ªØ l·∫°i ƒë·ªÉ t√°i s·ª≠ d·ª•ng v√† tr√°nh t·∫°o m·ªõi.
 */
function hideError() {
    const errorDiv = document.getElementById('error-notification');
    if (errorDiv) {
        errorDiv.style.display = 'none';
    }
}

/**
 * T·∫°o ph·∫ßn t·ª≠ th√¥ng b√°o l·ªói m·ªõi.
 * H√†m ch·ªâ ƒë∆∞·ª£c g·ªçi khi kh√¥ng t√¨m th·∫•y template trong DOM.
 *
 * @returns {HTMLElement}  Ph·∫ßn t·ª≠ v·ª´a ƒë∆∞·ª£c t·∫°o.
 */
function createErrorNotification() {
    // 1Ô∏è‚É£  T·∫°o container
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-notification';

    // 2Ô∏è‚É£  B∆°m HTML: icon ‚ö†Ô∏è, text, n√∫t ƒë√≥ng √ó
    errorDiv.innerHTML = `
        <div class="error-content">
            <i class="error-icon">‚ö†Ô∏è</i>
            <span class="error-message"></span>
            <button class="error-close" onclick="hideError()"></button>
        </div>
    `;
    // 3Ô∏è‚É£  G√°n CSS inline (ƒë·∫£m b·∫£o hi·ªÉn th·ªã k·ªÉ c·∫£ thi·∫øu stylesheet ngo√†i)
    errorDiv.style.cssText = `
        position: fixed; top: 20px; right: 20px; background: #ff4444;
        color: white; padding: 15px; border-radius: 5px; display: none;
        z-index: 10000; max-width: 400px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    `;
    // 4Ô∏è‚É£  Th√™m v√†o DOM & tr·∫£ v·ªÅ
    document.body.appendChild(errorDiv);
    return errorDiv;
}

// ======== C·∫¨P-NH·∫¨T BADGE TR·∫†NG TH√ÅI K·∫æT N·ªêI =========
function updateConnectionStatus(status) {
    connectionState = status; // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ module kh√°c tra c·ª©u
    // T√¨m ph·∫ßn t·ª≠ badge (#connection-status) render s·∫µn trong Room.cshtml.
    // N·∫øu kh√¥ng c√≥ (page kh√°c) ‚ûú t·ª± t·∫°o b·∫±ng createConnectionStatus().
    const statusDiv = document.getElementById('connection-status') || createConnectionStatus();
    // Hai node con c·∫ßn c·∫≠p nh·∫≠t: icon & text
    const statusText = statusDiv.querySelector('.status-text');
    const statusIcon = statusDiv.querySelector('.status-icon');

    // ƒê·ªïi UI theo 4 tr·∫°ng th√°i ch√≠nh
    switch (status) {
        case 'connected':    // Khi SignalR & WebRTC ƒë·ªÅu OK
            statusText.textContent = 'ƒê√£ k·∫øt n·ªëi';
            statusIcon.textContent = 'üü¢';
            statusDiv.className = 'connection-status connected'; // CSS ƒë·ªïi m√†u n·ªÅn/v√≤ng s√°ng
            break;
        case 'connecting':   // ƒêang xin quy·ªÅn camera, ƒëang start SignalR‚Ä¶
            statusText.textContent = 'ƒêang k·∫øt n·ªëi...';
            statusIcon.textContent = 'üü°';
            statusDiv.className = 'connection-status connecting';
            break;
        case 'disconnected': // M·∫•t m·∫°ng ho·∫∑c server ƒë√≥ng
            statusText.textContent = 'M·∫•t k·∫øt n·ªëi';
            statusIcon.textContent = 'üî¥';
            statusDiv.className = 'connection-status disconnected';
            break;
        case 'reconnecting': // SignalR onreconnecting
            statusText.textContent = 'ƒêang k·∫øt n·ªëi l·∫°i...';
            statusIcon.textContent = 'üü°';
            statusDiv.className = 'connection-status reconnecting';
            break;
    }
}

// ======== FALLBACK ‚Äì T·∫†O BADGE N·∫æU TRANG CH∆ØA C√ì =========
function createConnectionStatus() {
    const statusDiv = document.createElement('div');
    statusDiv.id = 'connection-status';
    statusDiv.innerHTML = `
        <span class="status-icon"></span>
        <span class="status-text"></span>
    `;
    // ƒê·ªÉ CSS x·ª≠ l√Ω t·∫•t c·∫£ c√°c v·ªã tr√≠ v√† ki·ªÉu d√°ng
    // statusDiv.style.cssText ƒë√£ x√≥a ƒë·ªÉ tr√°nh xung ƒë·ªôt CSS
    document.body.appendChild(statusDiv);
    return statusDiv;
}

// ======== KHI DOM ƒê√É S·∫¥N S√ÄNG ========
document.addEventListener('DOMContentLoaded', () => {
    // L·∫•y ID user hi·ªán t·∫°i t·ª´ HTML
    currentUserId = getCurrentUserId();
    console.log('Current User ID:', currentUserId);

    // Setup c√°c n√∫t ƒëi·ªÅu khi·ªÉn (mute, camera, screen share...)
    setupControls();

    // Ch·ªù Room.cshtml g·ªçi initializeVideoCall() ƒë·ªÉ tr√°nh double init
    console.log('‚úÖ videocall.js DOM ready, waiting for Room.cshtml to initialize...');
});

// ======== KH·ªûI T·∫†O VIDEO CALL ========
// -------------------------------------------------------------
// C·ªù ch·ªëng kh·ªüi t·∫°o l·∫∑p ‚Äì ƒë·∫£m b·∫£o initializeVideoCall ch·ªâ
// ch·∫°y m·ªôt lu·ªìng t·∫°i m·ªôt th·ªùi ƒëi·ªÉm (tr√°nh double-click, race-condition)
// -------------------------------------------------------------
let isInitializing = false;
async function initializeVideoCall() {
    // 1Ô∏è‚É£  Kh√¥ng th·ª±c thi n·∫øu ƒë√£ c√≥ lu·ªìng kh·ªüi t·∫°o kh√°c
    if (isInitializing) {
        console.log('‚ö†Ô∏è initializeVideoCall already in progress, skipping...');
        return;
    }

    // 2Ô∏è‚É£  Ch·ªâ ti·∫øp t·ª•c khi HubConnection ƒëang ho√†n to√†n NG·∫ÆT (Disconnected)
    if (connection.state !== signalR.HubConnectionState.Disconnected) {
        console.log('‚ö†Ô∏è Connection not in Disconnected state:', connection.state);
        return;
    }

    // 3Ô∏è‚É£  ƒê·∫∑t c·ªù "ƒëang kh·ªüi t·∫°o" ƒë·ªÉ kh√≥a c√°c l·ªùi g·ªçi kh√°c
    isInitializing = true;
    try {
        // 4Ô∏è‚É£  Hi·ªÉn th·ªã overlay loading cho ng∆∞·ªùi d√πng
        showLoading('ƒêang kh·ªüi t·∫°o cu·ªôc h·ªçp...');
        // 5Ô∏è‚É£  G·ªçi h√†m trung t√¢m start() (m·ªü cam ‚ûú k·∫øt n·ªëi SignalR ‚ûú JoinRoom)
        await start();
        // 6Ô∏è‚É£  Kh·ªüi t·∫°o th√†nh c√¥ng ‚ûú ·∫©n overlay
        hideLoading();
        console.log('‚úÖ Video call initialized successfully');
    } catch (error) {
        // ‚ùå G·∫∑p l·ªói ‚ûú ·∫©n overlay & hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
        hideLoading();
        handleError(error, 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o cu·ªôc h·ªçp');
    } finally {
        // 7Ô∏è‚É£  Lu√¥n h·∫° c·ªù ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ kh·ªüi t·∫°o l·∫°i
        isInitializing = false;
    }
}

// ======== 1. H√ÄM KH·ªûI ƒê·ªòNG CU·ªòC G·ªåI ========
async function start() {
    try {
        // üü° 0. B√°o UI: ƒëang k·∫øt n·ªëi
        updateConnectionStatus('connecting');

        // 1Ô∏è‚É£ L·∫§Y CAMERA + MIC  (c√≥ c∆° ch·∫ø th·ª≠-l·∫°i & fallback)
        showLoading('ƒêang truy c·∫≠p camera v√† microphone...');
        localStream = await getUserMediaWithRetry(); // xin quy·ªÅn ‚á¢ stream
        addVideo(localStream, 'self');   // hi·ªÉn th·ªã video c·ªßa ch√≠nh m√¨nh

        // 2Ô∏è‚É£ ƒêƒÇNG K√ù C√ÅC S·ª∞ KI·ªÜN SignalR (Peers, Signal, CallEnded‚Ä¶)
        setupSignalREvents();

        // 3Ô∏è‚É£ M·ªû K·∫æT N·ªêI SIGNALR  (t·ª± retry & back-off)
        showLoading('ƒêang k·∫øt n·ªëi ƒë·∫øn server...');
        await connectSignalRWithRetry();

        // 4Ô∏è‚É£ THAM GIA PH√íNG (JoinRoom) + theo d√µi user
        showLoading('ƒêang tham gia ph√≤ng h·ªçp...');
        const meetingCode = document.getElementById('video-grid')?.dataset?.meetingCode;
        if (!meetingCode) {
            throw new Error(ERROR_TYPES.MEETING_NOT_FOUND);
        }

        // Join room with user ID for tracking
        await connection.invoke('JoinRoom', meetingCode, currentUserId);
        console.log('Joined room', meetingCode, 'with user ID', currentUserId);
        
        // L·∫•y session ID t·ª´ meeting service
        try {
            const response = await fetch(`/Meeting/GetActiveSession?code=${encodeURIComponent(meetingCode)}`);
            if (response.ok) {
                const sessionData = await response.json();
                if (sessionData.sessionId) {
                    window.currentSessionId = sessionData.sessionId;
                    console.log('Got session ID from meeting service:', window.currentSessionId);
                } else {
                    // Fallback: generate a temporary session ID
                    window.currentSessionId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                        const r = Math.random() * 16 | 0;
                        const v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                    console.log('Generated temporary session ID:', window.currentSessionId);
                }
            } else {
                // Fallback: generate a temporary session ID
                window.currentSessionId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0;
                    const v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                console.log('Generated temporary session ID (fallback):', window.currentSessionId);
            }
        } catch (error) {
            console.error('Error getting session ID:', error);
            // Fallback: generate a temporary session ID
            window.currentSessionId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            console.log('Generated temporary session ID (error fallback):', window.currentSessionId);
        }
        
        // L∆∞u th√¥ng tin room v√† session ƒë·ªÉ chat system c√≥ th·ªÉ s·ª≠ d·ª•ng
        window.currentRoomId = meetingCode;
        window.currentUserId = currentUserId;

        // üü¢ Th√†nh c√¥ng: c·∫≠p-nh·∫≠t badge & t·∫Øt loading
        updateConnectionStatus('connected');
        hideLoading();

    } catch (error) {
        // üî¥ G·∫∑p l·ªói b·∫•t k·ª≥ ‚Üí b√°o UI "m·∫•t k·∫øt n·ªëi"
        updateConnectionStatus('disconnected');
        throw error;
    }
}

// ======== RETRY MECHANISM FOR MEDIA ACCESS ========
// H√†m n√†y th·ª±c hi·ªán chi·∫øn l∆∞·ª£c fallback ƒë·ªÉ l·∫•y quy·ªÅn truy c·∫≠p camera/microphone
// N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c c·∫£ hai, s·∫Ω th·ª≠ t·ª´ng c√°i m·ªôt
async function getUserMediaWithRetry(constraints = { video: true, audio: true }) {
    let lastError; // L∆∞u l·ªói cu·ªëi c√πng ƒë·ªÉ ph√¢n lo·∫°i sau n√†y

    // B∆Ø·ªöC 1: Th·ª≠ l·∫•y c·∫£ video v√† audio (tr∆∞·ªùng h·ª£p l√Ω t∆∞·ªüng nh·∫•t)
    try {
        // getUserMedia() l√† API c·ªßa browser ƒë·ªÉ xin quy·ªÅn truy c·∫≠p camera/mic
        // await ƒë·ª£i user cho ph√©p ho·∫∑c t·ª´ ch·ªëi
        return await navigator.mediaDevices.getUserMedia(constraints);
    } catch (error) {
        // N·∫øu l·ªói, l∆∞u l·∫°i ƒë·ªÉ ph√¢n lo·∫°i sau
        lastError = error;
        // console.warn() in ra warning (kh√¥ng d·ª´ng ch∆∞∆°ng tr√¨nh)
        console.warn('Failed to get video+audio, trying audio only:', error);
    }

    // B∆Ø·ªöC 2: N·∫øu l·ªói ‚Üí th·ª≠ ch·ªâ l·∫•y audio (b·ªè video)
    try {
        // Ch·ªâ xin quy·ªÅn microphone, kh√¥ng xin camera
        const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
        // showError() hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user bi·∫øt
        showError('Kh√¥ng th·ªÉ truy c·∫≠p camera. Ch·ªâ c√≥ √¢m thanh.', true);
        // Tr·∫£ v·ªÅ stream ch·ªâ c√≥ audio
        return audioStream;
    } catch (error) {
        // N·∫øu audio c≈©ng l·ªói, ti·∫øp t·ª•c th·ª≠ video
        console.warn('Failed to get audio, trying video only:', error);
    }

    // B∆Ø·ªöC 3: N·∫øu l·ªói ‚Üí th·ª≠ ch·ªâ l·∫•y video (b·ªè audio)
    try {
        // Ch·ªâ xin quy·ªÅn camera, kh√¥ng xin microphone
        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
        // Th√¥ng b√°o cho user bi·∫øt ch·ªâ c√≥ video
        showError('Kh√¥ng th·ªÉ truy c·∫≠p microphone. Ch·ªâ c√≥ video.', true);
        // Tr·∫£ v·ªÅ stream ch·ªâ c√≥ video
        return videoStream;
    } catch (error) {
        // N·∫øu video c≈©ng l·ªói, in error v√† ti·∫øp t·ª•c
        console.error('Failed to get any media:', error);
    }

    // B∆Ø·ªöC 4: N·∫øu t·∫•t c·∫£ ƒë·ªÅu l·ªói ‚Üí ph√¢n lo·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ph√π h·ª£p
    if (lastError.name === 'NotAllowedError') {
        // User ƒë√£ t·ª´ ch·ªëi c·∫•p quy·ªÅn truy c·∫≠p
        throw new Error(ERROR_TYPES.MEDIA_ACCESS_DENIED);
    } else if (lastError.name === 'NotFoundError') {
        // Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã camera/mic
        throw new Error(ERROR_TYPES.MEDIA_NOT_FOUND);
    } else {
        // L·ªói kh√°c (m·∫°ng, h·ªá th·ªëng...)
        throw new Error(ERROR_TYPES.NETWORK_ERROR);
    }
}

// ======== SIGNALR CONNECTION WITH RETRY ========
async function connectSignalRWithRetry() {
    // Prevent race conditions with global lock
    if (isConnecting) {
        console.log('‚è≥ Connection already in progress, waiting...');
        // Wait for existing connection attempt to complete
        while (isConnecting) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        // Check final state after waiting
        if (connection.state === signalR.HubConnectionState.Connected) {
            console.log('‚úÖ Connection completed by another process');
            return;
        }
    }

    // Set lock
    isConnecting = true;
    let attempts = 0;

    try {
        while (attempts < MAX_RETRIES) {
            try {
                // Double-check connection state with lock
                if (connection.state === signalR.HubConnectionState.Connected) {
                    console.log('‚úÖ SignalR already connected');
                    return;
                } else if (connection.state === signalR.HubConnectionState.Connecting) {
                    console.log('‚è≥ Connection already in progress, waiting...');
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    continue;
                } else if (connection.state === signalR.HubConnectionState.Disconnected) {
                    console.log('üîÑ Starting SignalR connection...');
                    await connection.start();
                    console.log('‚úÖ SignalR connected successfully');
                    retryCount = 0; // Reset retry count on success
                    return;
                } else {
                    // Reconnecting or other states - wait
                    console.log(`‚è≥ SignalR in ${connection.state} state, waiting...`);
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    continue;
                }
            } catch (error) {
                attempts++;
                console.warn(`‚ùå SignalR connection attempt ${attempts} failed:`, error);

                if (attempts >= MAX_RETRIES) {
                    throw new Error(ERROR_TYPES.SIGNALR_CONNECTION_FAILED);
                }

                // Stop connection if it's in a bad state
                try {
                    if (connection.state !== signalR.HubConnectionState.Disconnected) {
                        console.log('üõë Stopping connection in bad state...');
                        await connection.stop();
                    }
                } catch (stopError) {
                    console.warn('‚ö†Ô∏è Error stopping connection:', stopError);
                }

                // Exponential backoff
                const delay = Math.pow(2, attempts) * 1000;
                showLoading(`ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i... (${attempts}/${MAX_RETRIES})`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    } finally {
        // Always release lock
        isConnecting = false;
    }
}

// ======== SETUP SIGNALR EVENTS ========
/**
 * Thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c s·ª± ki·ªán SignalR ƒë·ªÉ x·ª≠ l√Ω k·∫øt n·ªëi realtime
 * H√†m n√†y ƒë∆∞·ª£c g·ªçi m·ªôt l·∫ßn khi kh·ªüi t·∫°o video call ƒë·ªÉ ƒëƒÉng k√Ω c√°c event handler
 * C√°c s·ª± ki·ªán bao g·ªìm: k·∫øt n·ªëi l·∫°i, qu·∫£n l√Ω peer, t√≠n hi·ªáu WebRTC, v√† th·ªëng k√™
 */
function setupSignalREvents() {
    // ====== S·ª± ki·ªán k·∫øt n·ªëi l·∫°i (t·ª± ƒë·ªông khi m·∫•t k·∫øt n·ªëi m·∫°ng) ======
    connection.onreconnecting(() => {
        // Khi SignalR ƒëang c·ªë g·∫Øng k·∫øt n·ªëi l·∫°i v·ªõi server (m·∫•t m·∫°ng t·∫°m th·ªùi)
        console.log('SignalR reconnecting...');
        updateConnectionStatus('reconnecting'); // C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
        showError('M·∫•t k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...', true); // Hi·ªán th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
    });

    connection.onreconnected(() => {
        // Khi SignalR ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng
        console.log('SignalR reconnected');
        updateConnectionStatus('connected'); // C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
        hideError(); // ·∫®n th√¥ng b√°o l·ªói
    });

    connection.onclose(() => {
        // Khi k·∫øt n·ªëi SignalR b·ªã ƒë√≥ng ho√†n to√†n (kh√¥ng th·ªÉ t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i)
        console.log('SignalR connection closed');
        updateConnectionStatus('disconnected'); // C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
        showError('M·∫•t k·∫øt n·ªëi ƒë·∫øn server', false); // Hi·ªán th√¥ng b√°o l·ªói c·ªë ƒë·ªãnh
    });

    // ====== S·ª± ki·ªán li√™n quan ƒë·∫øn ph√≤ng h·ªçp (meeting) ======
    connection.on('Peers', list => {
        // Nh·∫≠n danh s√°ch c√°c peerId (ng∆∞·ªùi tham gia kh√°c) khi v·ª´a v√†o ph√≤ng
        // Server g·ª≠i danh s√°ch n√†y ƒë·ªÉ client t·∫°o k·∫øt n·ªëi WebRTC v·ªõi t·ª´ng ng∆∞·ªùi
        console.log('Peers:', list);
        try {
            list.forEach(id => initPeer(id, true)); // T·∫°o peer connection v·ªõi t·ª´ng ng∆∞·ªùi (initiator = true)
        } catch (error) {
            // N·∫øu c√≥ l·ªói khi t·∫°o k·∫øt n·ªëi v·ªõi peer n√†o ƒë√≥
            console.error('Error initializing peers:', error);
            showError('L·ªói khi k·∫øt n·ªëi v·ªõi ng∆∞·ªùi tham gia kh√°c', true);
        }
    });

    connection.on('NewPeer', id => {
        // Khi c√≥ ng∆∞·ªùi m·ªõi v√†o ph√≤ng, server g·ª≠i s·ª± ki·ªán n√†y cho c√°c client c√≤n l·∫°i
        // Client s·∫Ω t·∫°o k·∫øt n·ªëi WebRTC v·ªõi ng∆∞·ªùi m·ªõi (initiator = false)
        console.log('NewPeer:', id);
        try {
            initPeer(id, false);
        } catch (error) {
            // N·∫øu c√≥ l·ªói khi t·∫°o k·∫øt n·ªëi v·ªõi peer m·ªõi
            console.error('Error initializing new peer:', error);
            showError('L·ªói khi k·∫øt n·ªëi v·ªõi ng∆∞·ªùi tham gia m·ªõi', true);
        }
    });

    connection.on('Signal', (from, data) => {
        // ====== GI·∫¢I TH√çCH CHI TI·∫æT S·ª∞ KI·ªÜN SIGNAL ======

        // 'from': peerId (connectionId) c·ªßa ng∆∞·ªùi g·ª≠i t√≠n hi·ªáu
        //         ƒê√¢y l√† ID duy nh·∫•t m√† server SignalR g√°n cho m·ªói client khi k·∫øt n·ªëi
        //         V√≠ d·ª•: "abc123-def456-ghi789" (ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi SignalR)

        // 'data': N·ªôi dung t√≠n hi·ªáu WebRTC, c√≥ th·ªÉ l√†:
        //         - SDP Offer: Khi peer A mu·ªën k·∫øt n·ªëi v·ªõi peer B
        //         - SDP Answer: Khi peer B ch·∫•p nh·∫≠n k·∫øt n·ªëi t·ª´ peer A  
        //         - ICE Candidate: Th√¥ng tin v·ªÅ ƒë∆∞·ªùng truy·ªÅn m·∫°ng (IP, port, protocol)

        // Nh·∫≠n t√≠n hi·ªáu WebRTC (SDP, ICE candidate) t·ª´ server, do peer kh√°c g·ª≠i l√™n
        // 'from' l√† peerId c·ªßa ng∆∞·ªùi g·ª≠i, 'data' l√† n·ªôi dung t√≠n hi·ªáu
        try {
            // Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i peer connection v·ªõi 'from' kh√¥ng
            // peers l√† object global ch·ª©a t·∫•t c·∫£ peer connections hi·ªán t·∫°i
            // Key = connectionId, Value = SimplePeer object
            if (peers[from]) {
                // Chuy·ªÉn t√≠n hi·ªáu v√†o ƒë√∫ng SimplePeer object
                // SimplePeer s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω t√≠n hi·ªáu n√†y ƒë·ªÉ thi·∫øt l·∫≠p k·∫øt n·ªëi WebRTC
                peers[from].signal(data); // Chuy·ªÉn t√≠n hi·ªáu n√†y v√†o ƒë·ªëi t∆∞·ª£ng SimplePeer t∆∞∆°ng ·ª©ng
            }
        } catch (error) {
            // N·∫øu c√≥ l·ªói khi x·ª≠ l√Ω t√≠n hi·ªáu
            console.error('Error handling signal:', error);
        }
    });

    connection.on('CallEnded', () => {
        // Khi cu·ªôc g·ªçi k·∫øt th√∫c (ai ƒë√≥ b·∫•m k·∫øt th√∫c ho·∫∑c server ƒë√≥ng ph√≤ng)
        showError('Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c', false); // Hi·ªán th√¥ng b√°o cho ng∆∞·ªùi d√πng
        setTimeout(() => {
            stopAll(); // D·ª´ng to√†n b·ªô k·∫øt n·ªëi, gi·∫£i ph√≥ng t√†i nguy√™n
            window.location.href = '/Meeting/Index'; // Chuy·ªÉn v·ªÅ trang danh s√°ch ph√≤ng h·ªçp
        }, 2000); // ƒê·ª£i 2 gi√¢y cho ng∆∞·ªùi d√πng ƒë·ªçc th√¥ng b√°o
    });

    // ======== S·ª± ki·ªán th·ªëng k√™ cu·ªôc g·ªçi (m·ªõi) ========
    connection.on('CallHistory', (history) => {
        // Nh·∫≠n l·ªãch s·ª≠ c√°c cu·ªôc g·ªçi (n·∫øu server g·ª≠i v·ªÅ)
        // C√≥ th·ªÉ d√πng ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ trong UI
        console.log('Call History:', history);
    });

    connection.on('CallStatistics', (stats) => {
        // Nh·∫≠n th·ªëng k√™ realtime v·ªÅ cu·ªôc g·ªçi (v√≠ d·ª•: bitrate, s·ªë ng∆∞·ªùi tham gia, v.v.)
        // C√≥ th·ªÉ d√πng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ch·∫•t l∆∞·ª£ng cu·ªôc g·ªçi cho ng∆∞·ªùi d√πng
        console.log('Call Statistics:', stats);
    });
}

// ======== 2. KH·ªûI T·∫†O PEER V·ªöI ERROR HANDLING ========
// H√†m n√†y t·∫°o k·∫øt n·ªëi peer-to-peer v·ªõi m·ªôt ng∆∞·ªùi kh√°c trong cu·ªôc g·ªçi video
// peerId: ID c·ªßa ng∆∞·ªùi c·∫ßn k·∫øt n·ªëi (v√≠ d·ª•: 'user123')
// initiator: true n·∫øu b·∫°n l√† ng∆∞·ªùi kh·ªüi t·∫°o k·∫øt n·ªëi, false n·∫øu b·∫°n l√† ng∆∞·ªùi nh·∫≠n
function initPeer(peerId, initiator) {
    // N·∫øu ƒë√£ c√≥ k·∫øt n·ªëi v·ªõi peer n√†y r·ªìi th√¨ kh√¥ng t·∫°o l·∫°i n·ªØa (tr√°nh duplicate)
    if (peers[peerId]) return; // ƒë√£ kh·ªüi t·∫°o r·ªìi

    try {
        // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng SimplePeer ƒë·ªÉ k·∫øt n·ªëi WebRTC
        const peer = new SimplePeer({
            initiator,  // B·∫°n l√† ng∆∞·ªùi kh·ªüi t·∫°o (offer) hay kh√¥ng (answer)
            stream: localStream,  // Stream video/audio c·ªßa b·∫°n ƒë·ªÉ g·ª≠i cho peer
            config: { iceServers: ICE_SERVERS } // Danh s√°ch STUN/TURN server ƒë·ªÉ h·ªó tr·ª£ k·∫øt n·ªëi
        });

        // ===== Error handling cho peer =====
        // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh k·∫øt n·ªëi ho·∫∑c truy·ªÅn d·ªØ li·ªáu
        peer.on('error', (error) => {
            console.error(`Peer ${peerId} error:`, error);
            handlePeerError(peerId, error); // X·ª≠ l√Ω l·ªói v√† d·ªçn d·∫πp
        });

        // ===== Theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi =====
        // Khi k·∫øt n·ªëi peer-to-peer th√†nh c√¥ng
        peer.on('connect', () => {
            console.log(`Peer ${peerId} connected`);
        });

        // Khi k·∫øt n·ªëi peer-to-peer b·ªã ƒë√≥ng (peer r·ªùi ph√≤ng ho·∫∑c m·∫•t k·∫øt n·ªëi)
        peer.on('close', () => {
            console.log(`Peer ${peerId} connection closed`);
            removePeer(peerId);  // X√≥a peer kh·ªèi danh s√°ch v√† UI
        });

        // ===== 2.1 Khi c√≥ offer/answer/ICE m·ªõi =====
        // ƒêƒÉng k√Ω s·ª± ki·ªán 'signal' c·ªßa SimplePeer
        // S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t khi SimplePeer t·∫°o ra m·ªôt t√≠n hi·ªáu WebRTC m·ªõi (offer, answer, ho·∫∑c ICE candidate)
        peer.on('signal', data => {
            // G·ª≠i t√≠n hi·ªáu n√†y l√™n server (SignalR) ƒë·ªÉ chuy·ªÉn ti·∫øp cho peer c√≤n l·∫°i (ng∆∞·ªùi c·∫ßn k·∫øt n·ªëi)
            // peerId l√† ID c·ªßa ng∆∞·ªùi nh·∫≠n, data l√† n·ªôi dung t√≠n hi·ªáu
            connection.invoke('Signal', peerId, data).catch(error => {
                // N·∫øu g·ª≠i t√≠n hi·ªáu l√™n server th·∫•t b·∫°i, log l·ªói v√† b√°o l·ªói cho user
                console.error('Error sending signal:', error);
                showError('L·ªói khi g·ª≠i t√≠n hi·ªáu', true);
            });
        });

        // ===== 2.2 Khi nh·∫≠n stream video/audio t·ª´ peer =====
        // ƒêƒÉng k√Ω s·ª± ki·ªán 'stream' c·ªßa SimplePeer
        // S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t khi k·∫øt n·ªëi WebRTC th√†nh c√¥ng v√† nh·∫≠n ƒë∆∞·ª£c stream video/audio t·ª´ peer b√™n kia
        peer.on('stream', stream => {
            try {
                // G·ªçi h√†m addVideo ƒë·ªÉ hi·ªÉn th·ªã video c·ªßa peer l√™n giao di·ªán (UI)
                // stream: MediaStream ch·ª©a video/audio c·ªßa peer
                // peerId: ID c·ªßa ng∆∞·ªùi g·ª≠i stream n√†y
                addVideo(stream, peerId);
            } catch (error) {
                // N·∫øu c√≥ l·ªói khi hi·ªÉn th·ªã video, log l·ªói v√† b√°o l·ªói cho user
                console.error('Error adding video:', error);
                showError('L·ªói khi hi·ªÉn th·ªã video', true);
            }
        });

        // L∆∞u peer v√†o object ƒë·ªÉ qu·∫£n l√Ω (truy c·∫≠p l·∫°i khi c·∫ßn)
        peers[peerId] = peer;

    } catch (error) {
        // N·∫øu c√≥ l·ªói khi kh·ªüi t·∫°o peer, log l·ªói v√† b√°o cho user
        console.error('Error initializing peer:', error);
        showError('L·ªói khi k·∫øt n·ªëi v·ªõi ng∆∞·ªùi tham gia', true);
    }
}

// ======== PEER ERROR HANDLING ========
// H√†m n√†y x·ª≠ l√Ω l·ªói khi k·∫øt n·ªëi peer-to-peer v·ªõi m·ªôt ng∆∞·ªùi b·ªã l·ªói
// ƒê∆∞·ª£c g·ªçi khi c√≥ l·ªói trong qu√° tr√¨nh k·∫øt n·ªëi ho·∫∑c duy tr√¨ k·∫øt n·ªëi v·ªõi peer
function handlePeerError(peerId, error) {
    // Log l·ªói chi ti·∫øt ra console ƒë·ªÉ developer debug
    // peerId: ID c·ªßa ng∆∞·ªùi b·ªã l·ªói (v√≠ d·ª•: 'user123')
    // error: Th√¥ng tin l·ªói chi ti·∫øt t·ª´ WebRTC
    console.error(`Peer ${peerId} error:`, error);

    // X√≥a peer b·ªã l·ªói kh·ªèi danh s√°ch v√† d·ªçn d·∫πp t√†i nguy√™n
    // removePeer() s·∫Ω: x√≥a video, h·ªßy k·∫øt n·ªëi, x√≥a kh·ªèi peers object
    removePeer(peerId);

    // Hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán cho user
    // Th√¥ng b√°o n√†y s·∫Ω t·ª± ƒë·ªông ·∫©n sau 5 gi√¢y (isTemporary = true)
    showError(`M·∫•t k·∫øt n·ªëi v·ªõi m·ªôt ng∆∞·ªùi tham gia`, true);

    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y (optional feature)
    setTimeout(() => {
        // Ch·ªâ th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu SignalR v·∫´n connected
        // Tr√°nh th·ª≠ k·∫øt n·ªëi khi ƒë√£ m·∫•t k·∫øt n·ªëi server
        if (connectionState === 'connected') {
            console.log(`Attempting to reconnect to peer ${peerId}`);
            // TODO: C√≥ th·ªÉ implement logic reconnect peer ·ªü ƒë√¢y
            // V√≠ d·ª•: g·ªçi l·∫°i initPeer(peerId, false) ƒë·ªÉ t·∫°o k·∫øt n·ªëi m·ªõi
        }
    }, 5000); // ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi l·∫°i
}

// ======== X√ìA PEER V√Ä VIDEO ========
// H√†m n√†y x√≥a ho√†n to√†n k·∫øt n·ªëi peer v√† video c·ªßa m·ªôt ng∆∞·ªùi kh·ªèi cu·ªôc g·ªçi
// ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi ƒë√≥ r·ªùi ph√≤ng, b·ªã l·ªói k·∫øt n·ªëi, ho·∫∑c b·∫°n r·ªùi ph√≤ng
function removePeer(peerId) {
    // Ki·ªÉm tra xem c√≥ k·∫øt n·ªëi peer v·ªõi ng∆∞·ªùi n√†y kh√¥ng
    if (peers[peerId]) {
        try {
            // H·ªßy k·∫øt n·ªëi WebRTC v·ªõi ng∆∞·ªùi n√†y
            // destroy() s·∫Ω: d·ª´ng streams, ƒë√≥ng connection, gi·∫£i ph√≥ng t√†i nguy√™n
            peers[peerId].destroy();
        } catch (error) {
            // N·∫øu c√≥ l·ªói khi h·ªßy k·∫øt n·ªëi, log l·ªói nh∆∞ng kh√¥ng d·ª´ng
            console.error('Error destroying peer:', error);
        }
        // X√≥a peer kh·ªèi danh s√°ch peers object
        // V√≠ d·ª•: peers = { 'user123': peer, 'user456': peer } 
        // Sau delete: peers = { 'user456': peer }
        delete peers[peerId];
    }

    // T√¨m v√† x√≥a video element c·ªßa ng∆∞·ªùi n√†y kh·ªèi m√†n h√¨nh
    // container-user123, container-user456, etc.
    const container = document.getElementById('container-' + peerId);
    if (container) {
        // X√≥a container video kh·ªèi DOM
        // User s·∫Ω kh√¥ng c√≤n th·∫•y video c·ªßa ng∆∞·ªùi n√†y
        container.remove();

        // C·∫≠p nh·∫≠t layout video grid sau khi x√≥a
        // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc video c√≤n l·∫°i cho ph√π h·ª£p
        updateVideoGridLayout();
    }
}

/// ======== 3. HI·ªÇN TH·ªä VIDEO V·ªöI ERROR HANDLING ========
// H√†m n√†y t·∫°o v√† hi·ªÉn th·ªã video element ƒë·ªÉ xem camera c·ªßa ch√≠nh m√¨nh v√† ng∆∞·ªùi kh√°c
function addVideo(stream, id) {
    try {
        // T√¨m container ch√≠nh ch·ª©a t·∫•t c·∫£ video
        const grid = document.getElementById('video-grid');
        if (!grid) {
            throw new Error('Video grid not found');
        }

        // T√¨m container cho video n√†y (v√≠ d·ª•: container-self, container-user123)
        let container = document.getElementById('container-' + id);
        let video;

        // N·∫øu container ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
        if (!container) {
            // T·∫°o div container cho video
            container = document.createElement('div');
            container.className = 'video-container';  // CSS class ƒë·ªÉ style
            container.id = 'container-' + id;   // ID duy nh·∫•t

            // T·∫°o element video
            video = document.createElement('video');
            video.id = id;   // ID video: self, user123
            video.autoplay = true;  // T·ª± ƒë·ªông ph√°t khi c√≥ stream
            video.playsInline = true;  // Ph√°t inline, kh√¥ng fullscreen
            video.muted = (id === 'self'); // T·∫Øt √¢m video c·ªßa ch√≠nh m√¨nh (tr√°nh echo)

            // X·ª≠ l√Ω l·ªói khi video kh√¥ng ph√°t ƒë∆∞·ª£c
            video.onerror = (e) => {
                console.error('Video element error:', e);
                showError('L·ªói khi ph√°t video', true);
            };

            // G·∫Øn video v√†o container, r·ªìi g·∫Øn container v√†o grid
            container.appendChild(video);
            grid.appendChild(container);
        } else {
            // N·∫øu container ƒë√£ t·ªìn t·∫°i ‚Üí l·∫•y video element b√™n trong
            video = container.querySelector('video');
        }

        // G√°n stream v√†o video ƒë·ªÉ hi·ªÉn th·ªã
        video.srcObject = stream;

        // L·∫Øng nghe khi stream k·∫øt th√∫c (ng∆∞·ªùi d√πng r·ªùi ph√≤ng)
        stream.addEventListener('ended', () => {
            console.log(`Stream ${id} ended`);
            // Ch·ªâ x√≥a video ng∆∞·ªùi kh√°c, kh√¥ng x√≥a video c·ªßa ch√≠nh m√¨nh
            if (id !== 'self') {
                removePeer(id);  // X√≥a video ng∆∞·ªùi kh√°c kh·ªèi m√†n h√¨nh
            }
        });

    } catch (error) {

        // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi t·∫°o/hi·ªÉn th·ªã video
        console.error('Error adding video:', error);
        showError('L·ªói khi hi·ªÉn th·ªã video', true);
    }
}

// ======== 4. D·ª™NG T·∫§T C·∫¢ V·ªöI TRACKING ========
/**
 * H√†m d·ªçn d·∫πp to√†n b·ªô t√†i nguy√™n khi k·∫øt th√∫c cu·ªôc g·ªçi video
 * ƒê∆∞·ª£c g·ªçi khi: ng∆∞·ªùi d√πng r·ªùi ph√≤ng, cu·ªôc g·ªçi k·∫øt th√∫c, ho·∫∑c c√≥ l·ªói nghi√™m tr·ªçng
 */
function stopAll() {
    try {
        // ====== B∆Ø·ªöC 1: TH√îNG B√ÅO CHO SERVER BI·∫æT USER ƒê√É R·ªúI PH√íNG ======
        const meetingCode = document.getElementById('video-grid')?.dataset?.meetingCode;
        if (meetingCode && currentUserId) {
            // G·ªçi SignalR ƒë·ªÉ th√¥ng b√°o server user ƒë√£ r·ªùi ph√≤ng
            // Server s·∫Ω: c·∫≠p nh·∫≠t database, th√¥ng b√°o cho c√°c user kh√°c, d·ªçn d·∫πp session
            connection.invoke('LeaveRoom', meetingCode, currentUserId).catch(error => {
                console.error('Error tracking leave:', error);
            });
        }

        // ====== B∆Ø·ªöC 2: D·ª™NG LOCAL STREAM (CAMERA + MICROPHONE) ======
        if (localStream) {
            // localStream ch·ª©a video track (camera) v√† audio track (microphone)
            localStream.getTracks().forEach(track => {
                try {
                    // D·ª´ng t·ª´ng track ri√™ng bi·ªát
                    // track.stop() s·∫Ω: t·∫Øt camera/microphone, gi·∫£i ph√≥ng t√†i nguy√™n hardware
                    track.stop();
                } catch (error) {
                    console.error('Error stopping track:', error);
                }
            });
            localStream = null; // X√≥a reference ƒë·ªÉ garbage collector d·ªçn d·∫πp
        }

        // ====== B∆Ø·ªöC 3: D·ª™NG SCREEN SHARE STREAM (N·∫æU ƒêANG CHIA S·∫∫ M√ÄN H√åNH) ======
        if (screenStream) {
            // screenStream ch·ª©a video track c·ªßa m√†n h√¨nh ƒë∆∞·ª£c chia s·∫ª
            screenStream.getTracks().forEach(track => {
                try {
                    // D·ª´ng screen sharing track
                    // track.stop() s·∫Ω: d·ª´ng chia s·∫ª m√†n h√¨nh, gi·∫£i ph√≥ng t√†i nguy√™n
                    track.stop();
                } catch (error) {
                    console.error('Error stopping screen track:', error);
                }
            });
            screenStream = null; // X√≥a reference
        }

        // ====== B∆Ø·ªöC 4: ƒê√ìNG T·∫§T C·∫¢ PEER CONNECTIONS (WEBRTC) ======
        Object.keys(peers).forEach(peerId => {
            try {
                // peers[peerId] l√† SimplePeer object cho m·ªói k·∫øt n·ªëi peer-to-peer
                // peer.destroy() s·∫Ω: ƒë√≥ng WebRTC connection, d·ª´ng stream, gi·∫£i ph√≥ng t√†i nguy√™n
                peers[peerId].destroy();
            } catch (error) {
                console.error('Error destroying peer:', error);
            }
            delete peers[peerId]; // X√≥a peer kh·ªèi object peers
        });

        // ====== B∆Ø·ªöC 5: D·ªåN D·∫∏P UI - X√ìA T·∫§T C·∫¢ VIDEO ELEMENTS ======
        const grid = document.getElementById('video-grid');
        if (grid) {
            // X√≥a t·∫•t c·∫£ video containers trong grid
            // Bao g·ªìm: video c·ªßa ch√≠nh m√¨nh v√† video c·ªßa c√°c peer kh√°c
            grid.innerHTML = '';
        }

        console.log('All connections stopped');

    } catch (error) {
        console.error('Error stopping all:', error);
    }
}

// ======== 5. THI·∫æT L·∫¨P C√ÅC N√öT ƒêI·ªÄU KHI·ªÇN V·ªöI ERROR HANDLING ========
/**
 * H√†m thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c n√∫t ƒëi·ªÅu khi·ªÉn trong cu·ªôc g·ªçi video
 * ƒê∆∞·ª£c g·ªçi sau khi video call system ƒë√£ kh·ªüi t·∫°o xong
 * M·ª•c ƒë√≠ch: G·∫Øn event listeners cho c√°c button ƒë·ªÉ user c√≥ th·ªÉ t∆∞∆°ng t√°c
 */
function setupControls() {
    try {
        // ====== B∆Ø·ªöC 1: L·∫§Y REFERENCES ƒê·∫æN C√ÅC BUTTON ELEMENTS ======
        // S·ª≠ d·ª•ng document.getElementById() ƒë·ªÉ t√¨m c√°c button theo ID
        // C√°c ID n√†y ph·∫£i kh·ªõp v·ªõi HTML trong Room.cshtml
        const toggleMicBtn = document.getElementById('toggle-mic');      // N√∫t b·∫≠t/t·∫Øt microphone
        const toggleCamBtn = document.getElementById('toggle-cam');      // N√∫t b·∫≠t/t·∫Øt camera
        const shareScreenBtn = document.getElementById('share-screen');  // N√∫t chia s·∫ª m√†n h√¨nh
        const leaveBtn = document.getElementById('btnLeave');            // N√∫t r·ªùi ph√≤ng
        const endBtn = document.getElementById('btnEnd');                // N√∫t k·∫øt th√∫c cu·ªôc h·ªçp (ch·ªâ host)

        // ====== B∆Ø·ªöC 2: THI·∫æT L·∫¨P N√öT B·∫¨T/T·∫ÆT MICROPHONE ======
        if (toggleMicBtn) {  // Ki·ªÉm tra button c√≥ t·ªìn t·∫°i kh√¥ng
            // ƒêƒÉng k√Ω event listener cho s·ª± ki·ªán 'click'
            // Arrow function () => {} s·∫Ω ƒë∆∞·ª£c g·ªçi khi user click button
            toggleMicBtn.addEventListener('click', () => {
                try {
                    // Ki·ªÉm tra localStream c√≥ t·ªìn t·∫°i kh√¥ng (camera/mic ƒë√£ ƒë∆∞·ª£c l·∫•y ch∆∞a)
                    if (localStream) {
                        // L·∫•y audio track t·ª´ stream (microphone)
                        // getAudioTracks() tr·∫£ v·ªÅ array, [0] l·∫•y track ƒë·∫ßu ti√™n
                        const audioTrack = localStream.getAudioTracks()[0];
                        
                        if (audioTrack) {  // Ki·ªÉm tra c√≥ audio track kh√¥ng
                            // B·∫≠t/t·∫Øt microphone b·∫±ng c√°ch thay ƒë·ªïi thu·ªôc t√≠nh enabled
                            // !audioTrack.enabled: ƒë·∫£o ng∆∞·ª£c tr·∫°ng th√°i hi·ªán t·∫°i
                            audioTrack.enabled = !audioTrack.enabled;
                            
                            // C·∫≠p nh·∫≠t text button d·ª±a tr√™n tr·∫°ng th√°i m·ªõi
                            // N·∫øu enabled = true ‚Üí "T·∫Øt mic", n·∫øu false ‚Üí "B·∫≠t mic"
                            toggleMicBtn.textContent = audioTrack.enabled ? 'T·∫Øt mic' : 'B·∫≠t mic';
                            
                            // Th√™m/x√≥a class 'active' ƒë·ªÉ thay ƒë·ªïi style button
                            // classList.toggle(class, condition): th√™m class n·∫øu condition = true
                            toggleMicBtn.classList.toggle('active', !audioTrack.enabled);
                        }
                    }
                } catch (error) {
                    // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi ƒëi·ªÅu khi·ªÉn microphone
                    console.error('Error toggling microphone:', error);
                    showError('L·ªói khi ƒëi·ªÅu khi·ªÉn microphone', true);
                }
            });
        }

        // ====== B∆Ø·ªöC 3: THI·∫æT L·∫¨P N√öT B·∫¨T/T·∫ÆT CAMERA ======
        if (toggleCamBtn) {
            toggleCamBtn.addEventListener('click', () => {
                try {
                    if (localStream) {
                        // L·∫•y video track t·ª´ stream (camera)
                        const videoTrack = localStream.getVideoTracks()[0];
                        
                        if (videoTrack) {
                            // B·∫≠t/t·∫Øt camera t∆∞∆°ng t·ª± nh∆∞ microphone
                            videoTrack.enabled = !videoTrack.enabled;
                            
                            // C·∫≠p nh·∫≠t text v√† style button
                            toggleCamBtn.textContent = videoTrack.enabled ? 'T·∫Øt cam' : 'B·∫≠t cam';
                            toggleCamBtn.classList.toggle('active', !videoTrack.enabled);
                        }
                    }
                } catch (error) {
                    console.error('Error toggling camera:', error);
                    showError('L·ªói khi ƒëi·ªÅu khi·ªÉn camera', true);
                }
            });
        }

        // ====== B∆Ø·ªöC 4: THI·∫æT L·∫¨P N√öT CHIA S·∫∫ M√ÄN H√åNH ======
        if (shareScreenBtn) {
            // S·ª≠ d·ª•ng async function v√¨ startScreenShare() l√† async
            shareScreenBtn.addEventListener('click', async () => {
                try {
                    // Ki·ªÉm tra xem ƒëang chia s·∫ª m√†n h√¨nh ch∆∞a
                    if (screenStream) {
                        // N·∫øu ƒëang chia s·∫ª ‚Üí d·ª´ng chia s·∫ª
                        stopScreenShare(shareScreenBtn);
                    } else {
                        // N·∫øu ch∆∞a chia s·∫ª ‚Üí b·∫Øt ƒë·∫ßu chia s·∫ª
                        await startScreenShare(shareScreenBtn);
                    }
                } catch (error) {
                    console.error('Screen share error:', error);
                    // G·ªçi h√†m x·ª≠ l√Ω l·ªói ri√™ng cho screen sharing
                    handleScreenShareError(error);
                }
            });
        }

        // ====== B∆Ø·ªöC 5: THI·∫æT L·∫¨P N√öT R·ªúI PH√íNG ======
        if (leaveBtn) {
            leaveBtn.addEventListener('click', () => {
                try {
                    // Hi·ªÉn th·ªã confirm dialog ƒë·ªÉ user x√°c nh·∫≠n
                    // confirm() tr·∫£ v·ªÅ true n·∫øu user click OK, false n·∫øu Cancel
                    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi cu·ªôc h·ªçp?')) {
                        // G·ªçi h√†m d·ªçn d·∫πp t·∫•t c·∫£ t√†i nguy√™n
                        stopAll();
                        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch ph√≤ng h·ªçp
                        window.location.href = '/Meeting/Index';
                    }
                    // N·∫øu user click Cancel ‚Üí kh√¥ng l√†m g√¨ c·∫£
                } catch (error) {
                    console.error('Error leaving meeting:', error);
                    showError('L·ªói khi r·ªùi cu·ªôc h·ªçp', true);
                }
            });
        }

        // ====== B∆Ø·ªöC 6: THI·∫æT L·∫¨P N√öT K·∫æT TH√öC CU·ªòC H·ªåP (CH·ªà HOST) ======
        if (endBtn) {
            // S·ª≠ d·ª•ng async v√¨ connection.invoke() tr·∫£ v·ªÅ Promise
            endBtn.addEventListener('click', async () => {
                try {
                    // X√°c nh·∫≠n v·ªõi user (ch·ªâ host m·ªõi c√≥ quy·ªÅn k·∫øt th√∫c)
                    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c cu·ªôc h·ªçp cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi?')) {
                        // L·∫•y meeting code t·ª´ HTML data attribute
                        const code = document.getElementById('video-grid')?.dataset?.meetingCode;
                        
                        if (code) {
                            // G·ªçi method EndRoom tr√™n server ƒë·ªÉ k·∫øt th√∫c cu·ªôc h·ªçp
                            // Server s·∫Ω th√¥ng b√°o cho t·∫•t c·∫£ user kh√°c
                            await connection.invoke('EndRoom', code);
                        }
                    }
                } catch (error) {
                    console.error('Error ending meeting:', error);
                    showError('L·ªói khi k·∫øt th√∫c cu·ªôc h·ªçp', true);
                }
            });
        }

    } catch (error) {
        // X·ª≠ l√Ω l·ªói chung n·∫øu c√≥ v·∫•n ƒë·ªÅ khi thi·∫øt l·∫≠p controls
        console.error('Error setting up controls:', error);
        showError('L·ªói khi thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn', false);
    }
}

// ======== SCREEN SHARING WITH ERROR HANDLING ========
/**
 * H√†m b·∫Øt ƒë·∫ßu chia s·∫ª m√†n h√¨nh trong cu·ªôc g·ªçi video
 * ƒê∆∞·ª£c g·ªçi khi user click n√∫t "Chia s·∫ª m√†n h√¨nh"
 * M·ª•c ƒë√≠ch: Thay th·∫ø video camera b·∫±ng video m√†n h√¨nh ƒë·ªÉ chia s·∫ª n·ªôi dung
 */
async function startScreenShare(button) {
    try {
        // ====== B∆Ø·ªöC 1: HI·ªÇN TH·ªä LOADING V√Ä XIN QUY·ªÄN CHIA S·∫∫ ======
        showLoading('ƒêang kh·ªüi t·∫°o chia s·∫ª m√†n h√¨nh...');

        // S·ª≠ d·ª•ng getDisplayMedia() API ƒë·ªÉ xin quy·ªÅn chia s·∫ª m√†n h√¨nh
        // ƒê√¢y l√† Web API m·ªõi thay th·∫ø cho getUserMedia() cho screen sharing
        screenStream = await navigator.mediaDevices.getDisplayMedia({
            video: true,    // Xin quy·ªÅn chia s·∫ª video (m√†n h√¨nh)
            audio: true     // Xin quy·ªÅn chia s·∫ª audio (√¢m thanh h·ªá th·ªëng)
            // L∆∞u √Ω: audio: true c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ browser
        });

        // ====== B∆Ø·ªöC 2: L·∫§Y VIDEO TRACK T·ª™ SCREEN STREAM ======
        // getVideoTracks() tr·∫£ v·ªÅ array c√°c video tracks
        // [0] l·∫•y track ƒë·∫ßu ti√™n (th∆∞·ªùng ch·ªâ c√≥ 1 track khi chia s·∫ª m√†n h√¨nh)
        const screenTrack = screenStream.getVideoTracks()[0];

        // ====== B∆Ø·ªöC 3: THAY TH·∫æ VIDEO TRACK HI·ªÜN T·∫†I ======
        // replaceTrack() s·∫Ω thay th·∫ø camera video b·∫±ng screen video
        // T·∫•t c·∫£ peer connections s·∫Ω nh·∫≠n ƒë∆∞·ª£c video m√†n h√¨nh thay v√¨ camera
        await replaceTrack(screenTrack);

        // ====== B∆Ø·ªöC 4: C·∫¨P NH·∫¨T UI - THAY ƒê·ªîI TR·∫†NG TH√ÅI BUTTON ======
        button.textContent = 'D·ª´ng chia s·∫ª';  // Thay ƒë·ªïi text button
        button.classList.add('active');       // Th√™m class ƒë·ªÉ thay ƒë·ªïi style

        // ====== B∆Ø·ªöC 5: ƒêƒÇNG K√ù EVENT HANDLER CHO SCREEN SHARE ENDED ======
        // onended: S·ª± ki·ªán ƒë∆∞·ª£c k√≠ch ho·∫°t khi user d·ª´ng chia s·∫ª t·ª´ browser UI
        // V√≠ d·ª•: User click "Stop sharing" trong browser popup
        screenTrack.onended = () => {
            console.log('Screen share ended by user');
            // G·ªçi h√†m d·ª´ng chia s·∫ª ƒë·ªÉ d·ªçn d·∫πp v√† kh√¥i ph·ª•c camera
            stopScreenShare(button);
        };

        // ====== B∆Ø·ªöC 6: ·∫®N LOADING KHI HO√ÄN TH√ÄNH ======
        hideLoading();

    } catch (error) {
        // ====== X·ª¨ L√ù L·ªñI ======
        hideLoading();  // ·∫®n loading d√π c√≥ l·ªói hay kh√¥ng
        throw error;    // Throw l·∫°i error ƒë·ªÉ caller x·ª≠ l√Ω
    }
}

function handleScreenShareError(error) {
    if (error.name === 'NotAllowedError') {
        showError('B·∫°n ƒë√£ t·ª´ ch·ªëi chia s·∫ª m√†n h√¨nh', true);
    } else if (error.name === 'NotFoundError') {
        showError('Kh√¥ng t√¨m th·∫•y m√†n h√¨nh ƒë·ªÉ chia s·∫ª', true);
    } else {
        showError('L·ªói khi chia s·∫ª m√†n h√¨nh', true);
    }
}

// ======== 6. THAY TH·∫æ VIDEO TRACK CHO SCREEN SHARE V·ªöI ERROR HANDLING ========
/**
 * H√†m thay th·∫ø video track trong cu·ªôc g·ªçi video
 * ƒê∆∞·ª£c g·ªçi khi user b·∫Øt ƒë·∫ßu ho·∫∑c d·ª´ng chia s·∫ª m√†n h√¨nh
 * M·ª•c ƒë√≠ch: Thay th·∫ø camera video b·∫±ng screen video (ho·∫∑c ng∆∞·ª£c l·∫°i)
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. startScreenShare() ‚Üí replaceTrack(screenTrack) ‚Üí Thay camera b·∫±ng screen
 * 2. stopScreenShare() ‚Üí replaceTrack(cameraTrack) ‚Üí Thay screen b·∫±ng camera
 * 
 * QUAN H·ªÜ V·ªöI WEBRTC:
 * - Thay ƒë·ªïi track trong localStream (MediaStream)
 * - C·∫≠p nh·∫≠t t·∫•t c·∫£ peer connections (RTCPeerConnection)
 * - ƒê·∫£m b·∫£o t·∫•t c·∫£ participants nh·∫≠n ƒë∆∞·ª£c video m·ªõi
 * 
 * BI·∫æN GLOBAL ƒê∆Ø·ª¢C S·ª¨ D·ª§NG:
 * - localStream: MediaStream hi·ªán t·∫°i (camera + microphone)
 * - peers: Object ch·ª©a t·∫•t c·∫£ peer connections
 */
async function replaceTrack(newTrack) {
    try {
        // ====== B∆Ø·ªöC 1: THAY TH·∫æ TRACK TRONG LOCALSTREAM ======
        // L·∫•y video track c≈© t·ª´ localStream (camera ho·∫∑c screen hi·ªán t·∫°i)
        // Optional chaining (?.) ƒë·ªÉ tr√°nh l·ªói n·∫øu localStream = null
        const oldTrack = localStream?.getVideoTracks()[0];
        
        if (oldTrack) {
            // X√≥a track c≈© kh·ªèi localStream
            // removeTrack() ch·ªâ x√≥a track kh·ªèi stream, kh√¥ng d·ª´ng track
            localStream.removeTrack(oldTrack);
            
            // D·ª´ng track c≈© ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n
            // stop() s·∫Ω t·∫Øt camera ho·∫∑c d·ª´ng screen sharing
            oldTrack.stop();
        }

        // Th√™m track m·ªõi v√†o localStream
        // addTrack() th√™m track v√†o stream ƒë·ªÉ s·ª≠ d·ª•ng
        if (localStream) {
            localStream.addTrack(newTrack);
        }

        // ====== B∆Ø·ªöC 2: THAY TH·∫æ TRACK TRONG T·∫§T C·∫¢ PEER CONNECTIONS ======
        // Object.values(peers) l·∫•y t·∫•t c·∫£ SimplePeer objects
        // map() t·∫°o array c√°c promises cho vi·ªác thay track
        const replacePromises = Object.values(peers).map(async (peer) => {
            try {
                // L·∫•y RTCPeerConnection t·ª´ SimplePeer object
                // _pc l√† thu·ªôc t√≠nh internal c·ªßa SimplePeer ch·ª©a WebRTC connection
                const sender = peer._pc?.getSenders()?.find(s =>
                    // T√¨m sender c√≥ track c√πng lo·∫°i v·ªõi newTrack (video)
                    s.track && s.track.kind === newTrack.kind
                );
                
                if (sender) {
                    // Thay th·∫ø track trong peer connection
                    // replaceTrack() s·∫Ω g·ª≠i track m·ªõi ƒë·∫øn peer b√™n kia
                    await sender.replaceTrack(newTrack);
                }
            } catch (error) {
                // X·ª≠ l√Ω l·ªói ri√™ng cho t·ª´ng peer
                // L·ªói m·ªôt peer kh√¥ng ·∫£nh h∆∞·ªüng peers kh√°c
                console.error('Error replacing track for peer:', error);
            }
        });

        // ƒê·ª£i t·∫•t c·∫£ promises ho√†n th√†nh
        // Promise.all() ƒë·ª£i t·∫•t c·∫£ peer connections ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        await Promise.all(replacePromises);

    } catch (error) {
        // X·ª≠ l√Ω l·ªói chung n·∫øu c√≥ v·∫•n ƒë·ªÅ khi thay track
        console.error('Error replacing track:', error);
        showError('L·ªói khi thay ƒë·ªïi video', true);
    }
}

// ======== 7. D·ª™NG CHIA S·∫∫ M√ÄN H√åNH V·ªöI ERROR HANDLING ========
/**
 * H√†m d·ª´ng chia s·∫ª m√†n h√¨nh v√† kh√¥i ph·ª•c camera
 * ƒê∆∞·ª£c g·ªçi khi user click n√∫t "D·ª´ng chia s·∫ª" ho·∫∑c browser t·ª± ƒë·ªông d·ª´ng
 * M·ª•c ƒë√≠ch: Chuy·ªÉn t·ª´ screen video v·ªÅ camera video
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. D·ª´ng screen sharing tracks ‚Üí Gi·∫£i ph√≥ng t√†i nguy√™n
 * 2. L·∫•y l·∫°i camera stream ‚Üí Kh√¥i ph·ª•c video camera
 * 3. Thay th·∫ø track ‚Üí C·∫≠p nh·∫≠t t·∫•t c·∫£ peer connections
 * 4. C·∫≠p nh·∫≠t UI ‚Üí Reset button state
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - startScreenShare(): H√†m ƒë·ªëi ngh·ªãch, b·∫Øt ƒë·∫ßu chia s·∫ª m√†n h√¨nh
 * - replaceTrack(): Thay th·∫ø video track trong peer connections
 * - setupControls(): G·ªçi h√†m n√†y khi click button
 */
function stopScreenShare(button) {
    try {
        // ====== B∆Ø·ªöC 1: KI·ªÇM TRA V√Ä D·ª™NG SCREEN STREAM ======
        // Ki·ªÉm tra xem c√≥ ƒëang chia s·∫ª m√†n h√¨nh kh√¥ng
        if (!screenStream) return;  // N·∫øu kh√¥ng c√≥ ‚Üí tho√°t s·ªõm

        // D·ª´ng t·∫•t c·∫£ tracks trong screen stream
        // getTracks() tr·∫£ v·ªÅ array c√°c MediaStreamTrack (video, audio)
        screenStream.getTracks().forEach(track => {
            try {
                // D·ª´ng t·ª´ng track ri√™ng bi·ªát
                // track.stop() s·∫Ω: d·ª´ng chia s·∫ª m√†n h√¨nh, gi·∫£i ph√≥ng t√†i nguy√™n
                track.stop();
            } catch (error) {
                // X·ª≠ l√Ω l·ªói ri√™ng cho t·ª´ng track
                // L·ªói m·ªôt track kh√¥ng ·∫£nh h∆∞·ªüng tracks kh√°c
                console.error('Error stopping screen track:', error);
            }
        });
        
        // X√≥a reference ƒë·∫øn screen stream
        screenStream = null;  // Cho ph√©p garbage collector d·ªçn d·∫πp

        // ====== B∆Ø·ªöC 2: KH√îI PH·ª§C CAMERA VIDEO ======
        // S·ª≠ d·ª•ng getUserMedia() ƒë·ªÉ l·∫•y l·∫°i camera stream
        // Promise-based approach thay v√¨ async/await ƒë·ªÉ x·ª≠ l√Ω l·ªói t·ªët h∆°n
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(async (camStream) => {
                // L·∫•y video track t·ª´ camera stream
                const camTrack = camStream.getVideoTracks()[0];
                
                // Thay th·∫ø screen track b·∫±ng camera track
                // replaceTrack() s·∫Ω c·∫≠p nh·∫≠t t·∫•t c·∫£ peer connections
                await replaceTrack(camTrack);
                
                // ====== B∆Ø·ªöC 3: C·∫¨P NH·∫¨T UI - RESET BUTTON STATE ======
                button.textContent = 'Chia s·∫ª m√†n h√¨nh';  // Reset text button
                button.classList.remove('active');        // X√≥a class active
            })
            .catch(error => {
                // ====== X·ª¨ L√ù L·ªñI KHI KH√îNG L·∫§Y ƒê∆Ø·ª¢C CAMERA ======
                console.error('Error getting camera back:', error);
                showError('Kh√¥ng th·ªÉ kh√¥i ph·ª•c camera', true);
                
                // Reset button state d√π c√≥ l·ªói
                button.textContent = 'Chia s·∫ª m√†n h√¨nh';
                button.classList.remove('active');
            });

    } catch (error) {
        // ====== X·ª¨ L√ù L·ªñI CHUNG ======
        console.error('Error stopping screen share:', error);
        showError('L·ªói khi d·ª´ng chia s·∫ª m√†n h√¨nh', true);
    }
}

// ======== GENERAL ERROR HANDLER ========
/**
 * H√†m x·ª≠ l√Ω l·ªói chung cho to√†n b·ªô h·ªá th·ªëng video call
 * ƒê∆∞·ª£c g·ªçi khi c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra trong qu√° tr√¨nh ho·∫°t ƒë·ªông
 * M·ª•c ƒë√≠ch: Chuy·ªÉn ƒë·ªïi l·ªói k·ªπ thu·∫≠t th√†nh th√¥ng b√°o th√¢n thi·ªán v·ªõi user
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. Nh·∫≠n error object v√† context ‚Üí Ph√¢n t√≠ch lo·∫°i l·ªói
 * 2. Map l·ªói k·ªπ thu·∫≠t ‚Üí Th√¥ng b√°o user-friendly
 * 3. Hi·ªÉn th·ªã th√¥ng b√°o l·ªói ‚Üí User hi·ªÉu ƒë∆∞·ª£c v·∫•n ƒë·ªÅ
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - showError(): Hi·ªÉn th·ªã th√¥ng b√°o l·ªói tr√™n UI
 * - ERROR_MESSAGES: Object ch·ª©a mapping l·ªói ‚Üí th√¥ng b√°o
 * - ERROR_TYPES: Enum ƒë·ªãnh nghƒ©a c√°c lo·∫°i l·ªói
 */
function handleError(error, context = '') {
    // ====== B∆Ø·ªöC 1: LOG L·ªñI CHI TI·∫æT CHO DEVELOPER ======
    // Ghi log ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªói ƒë·ªÉ developer debug
    // error: Error object ch·ª©a th√¥ng tin l·ªói
    // context: String m√¥ t·∫£ ng·ªØ c·∫£nh x·∫£y ra l·ªói (optional)
    console.error('Error:', error, 'Context:', context);

    // ====== B∆Ø·ªöC 2: KH·ªûI T·∫†O TH√îNG B√ÅO L·ªñI M·∫∂C ƒê·ªäNH ======
    // Th√¥ng b√°o m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng map ƒë∆∞·ª£c l·ªói c·ª• th·ªÉ
    let errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';

    // ====== B∆Ø·ªöC 3: MAP L·ªñI K·ª∏ THU·∫¨T TH√ÄNH TH√îNG B√ÅO USER-FRIENDLY ======
    
    // Ki·ªÉm tra 1: L·ªói c√≥ message v√† c√≥ trong ERROR_MESSAGES kh√¥ng
    if (error.message && ERROR_MESSAGES[error.message]) {
        // S·ª≠ d·ª•ng th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn
        // ERROR_MESSAGES l√† object ch·ª©a mapping: error.message ‚Üí user-friendly message
        errorMessage = ERROR_MESSAGES[error.message];
    } 
    // Ki·ªÉm tra 2: L·ªói NotAllowedError (user t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p)
    else if (error.name === 'NotAllowedError') {
        // L·ªói n√†y x·∫£y ra khi user t·ª´ ch·ªëi c·∫•p quy·ªÅn camera/microphone
        // S·ª≠ d·ª•ng th√¥ng b√°o t·ª´ ERROR_TYPES.MEDIA_ACCESS_DENIED
        errorMessage = ERROR_MESSAGES[ERROR_TYPES.MEDIA_ACCESS_DENIED];
    } 
    // Ki·ªÉm tra 3: L·ªói NotFoundError (kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã)
    else if (error.name === 'NotFoundError') {
        // L·ªói n√†y x·∫£y ra khi kh√¥ng t√¨m th·∫•y camera/microphone
        // S·ª≠ d·ª•ng th√¥ng b√°o t·ª´ ERROR_TYPES.MEDIA_NOT_FOUND
        errorMessage = ERROR_MESSAGES[ERROR_TYPES.MEDIA_NOT_FOUND];
    } 
    // Ki·ªÉm tra 4: C√≥ context ƒë∆∞·ª£c cung c·∫•p
    else if (context) {
        // T·∫°o th√¥ng b√°o t√πy ch·ªânh d·ª±a tr√™n context
        // K·∫øt h·ª£p context v·ªõi error.message ho·∫∑c th√¥ng b√°o m·∫∑c ƒë·ªãnh
        errorMessage = `${context}: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`;
    }

    // ====== B∆Ø·ªöC 4: HI·ªÇN TH·ªä TH√îNG B√ÅO L·ªñI CHO USER ======
    // G·ªçi showError() ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o tr√™n UI
    // false = kh√¥ng t·ª± ƒë·ªông ·∫©n (user ph·∫£i ƒë√≥ng th·ªß c√¥ng)
    showError(errorMessage, false);
}

// ======== WINDOW ERROR HANDLER ========
/**
 * Hai event handler n√†y b·∫Øt t·∫•t c·∫£ l·ªói ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω trong ·ª©ng d·ª•ng
 * ƒê√¢y l√† "safety net" - l∆∞·ªõi an to√†n ƒë·ªÉ b·∫Øt l·ªói m√† developer qu√™n handle
 * 
 * M·ª§C ƒê√çCH:
 * - B·∫Øt l·ªói JavaScript ch∆∞a ƒë∆∞·ª£c try-catch
 * - B·∫Øt Promise rejection ch∆∞a ƒë∆∞·ª£c .catch()
 * - ƒê·∫£m b·∫£o user lu√¥n th·∫•y th√¥ng b√°o l·ªói th√¢n thi·ªán
 * - Tr√°nh ·ª©ng d·ª•ng crash m√† kh√¥ng c√≥ feedback
 */

// ====== 1. ERROR EVENT HANDLER ======
window.addEventListener('error', (event) => {
    // ====== B·∫ÆT L·ªñI JAVASCRIPT CH∆ØA ƒê∆Ø·ª¢C X·ª¨ L√ù ======
    
    // event.error: Error object ch·ª©a th√¥ng tin l·ªói
    // V√≠ d·ª•: ReferenceError, TypeError, SyntaxError, etc.
    console.error('Global error:', event.error);
    
    // Chuy·ªÉn l·ªói k·ªπ thu·∫≠t th√†nh th√¥ng b√°o user-friendly
    handleError(event.error, 'L·ªói h·ªá th·ªëng');
    
    // ====== C√ÅC LO·∫†I L·ªñI C√ì TH·ªÇ B·∫ÆT ======
    // - ReferenceError: Bi·∫øn ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
    // - TypeError: G·ªçi method tr√™n null/undefined
    // - SyntaxError: L·ªói c√∫ ph√°p JavaScript
    // - RangeError: L·ªói v·ªÅ range (array index, etc.)
    // - URIError: L·ªói v·ªÅ URL encoding/decoding
});

// ====== 2. UNHANDLED REJECTION EVENT HANDLER ======
window.addEventListener('unhandledrejection', (event) => {
    // ====== B·∫ÆT PROMISE REJECTION CH∆ØA ƒê∆Ø·ª¢C X·ª¨ L√ù ======
    
    // event.reason: L√Ω do Promise b·ªã reject
    // C√≥ th·ªÉ l√† Error object ho·∫∑c string/object kh√°c
    console.error('Unhandled promise rejection:', event.reason);
    
    // Chuy·ªÉn l·ªói th√†nh th√¥ng b√°o user-friendly
    handleError(event.reason, 'L·ªói x·ª≠ l√Ω');
    
    // NgƒÉn browser hi·ªÉn th·ªã error message m·∫∑c ƒë·ªãnh
    // N·∫øu kh√¥ng c√≥ d√≤ng n√†y, browser s·∫Ω hi·ªÉn th·ªã "Uncaught (in promise)"
    event.preventDefault();
});

// ======== PAGE VISIBILITY HANDLING ========
/**
 * Event handler x·ª≠ l√Ω khi user chuy·ªÉn tab ho·∫∑c ·∫©n/hi·ªán browser
 * ƒê∆∞·ª£c k√≠ch ho·∫°t khi user: chuy·ªÉn tab, minimize browser, ho·∫∑c quay l·∫°i tab
 * M·ª•c ƒë√≠ch: T·ªëi ∆∞u hi·ªáu su·∫•t v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi c·∫ßn thi·∫øt
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. User chuy·ªÉn tab ‚Üí document.hidden = true ‚Üí Pause video (ti·∫øt ki·ªám CPU)
 * 2. User quay l·∫°i tab ‚Üí document.hidden = false ‚Üí Resume video + check connection
 * 3. N·∫øu m·∫•t k·∫øt n·ªëi ‚Üí T·ª± ƒë·ªông th·ª≠ k·∫øt n·ªëi l·∫°i SignalR
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - connectSignalRWithRetry(): K·∫øt n·ªëi l·∫°i SignalR khi c·∫ßn
 * - showError()/hideError(): Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
 * - connectionState: Bi·∫øn global theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
 */
document.addEventListener('visibilitychange', () => {
    // ====== B∆Ø·ªöC 1: KI·ªÇM TRA TR·∫†NG TH√ÅI HI·ªÇN TH·ªä ======
    if (document.hidden) {
        // ====== KHI PAGE B·ªä ·∫®N (CHUY·ªÇN TAB/MINIMIZE) ======
        console.log('Page hidden - pausing video');
        
        // TODO: C√≥ th·ªÉ th√™m logic pause video ƒë·ªÉ ti·∫øt ki·ªám CPU
        // V√≠ d·ª•: localStream.getVideoTracks().forEach(track => track.enabled = false);
        // Hi·ªán t·∫°i ch·ªâ log, ch∆∞a implement pause video
    } else {
        // ====== KHI PAGE ƒê∆Ø·ª¢C HI·ªÇN TH·ªä L·∫†I (QUAY L·∫†I TAB) ======
        console.log('Page visible - resuming video');
        
        // ====== B∆Ø·ªöC 2: KI·ªÇM TRA TR·∫†NG TH√ÅI K·∫æT N·ªêI ======
        if (connectionState === 'disconnected') {
            // ====== N·∫æU ƒêANG M·∫§T K·∫æT N·ªêI ‚Üí TH·ª¨ K·∫æT N·ªêI L·∫†I ======
            
            // Hi·ªÉn th·ªã th√¥ng b√°o cho user bi·∫øt ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i
            showError('ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...', true);
            
            // ====== B∆Ø·ªöC 3: KI·ªÇM TRA XEM C√ì ƒêANG K·∫æT N·ªêI KH√îNG ======
            if (!isConnecting) {
                // ====== CH∆ØA C√ì K·∫æT N·ªêI ƒêANG TI·∫æN H√ÄNH ‚Üí B·∫ÆT ƒê·∫¶U K·∫æT N·ªêI L·∫†I ======
                
                // G·ªçi h√†m k·∫øt n·ªëi l·∫°i SignalR (kh√¥ng kh·ªüi t·∫°o l·∫°i to√†n b·ªô)
                connectSignalRWithRetry().then(() => {
                    // ====== K·∫æT N·ªêI L·∫†I TH√ÄNH C√îNG ======
                    console.log('‚úÖ Reconnected successfully');
                    hideError(); // ·∫®n th√¥ng b√°o "ƒëang th·ª≠ k·∫øt n·ªëi"
                }).catch(error => {
                    // ====== K·∫æT N·ªêI L·∫†I TH·∫§T B·∫†I ======
                    console.error('Error reconnecting:', error);
                    showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i', false); // Th√¥ng b√°o l·ªói vƒ©nh vi·ªÖn
                });
            } else {
                // ====== ƒêANG C√ì K·∫æT N·ªêI TI·∫æN H√ÄNH ‚Üí KH√îNG L√ÄM G√å ======
                console.log('‚è≥ Connection already in progress, skipping reconnect');
                // Kh√¥ng g·ªçi connectSignalRWithRetry() ƒë·ªÉ tr√°nh race condition
            }
        }
        // ====== N·∫æU ƒêANG K·∫æT N·ªêI B√åNH TH∆Ø·ªúNG ‚Üí KH√îNG L√ÄM G√å ======
        // Ch·ªâ resume video (n·∫øu ƒë√£ pause) v√† ti·∫øp t·ª•c b√¨nh th∆∞·ªùng
    }
});

// ======== CLEANUP ON PAGE UNLOAD ========
/**
 * Event handler x·ª≠ l√Ω khi user r·ªùi kh·ªèi trang (ƒë√≥ng tab, refresh, navigate)
 * ƒê∆∞·ª£c k√≠ch ho·∫°t tr∆∞·ªõc khi trang b·ªã unload
 * M·ª•c ƒë√≠ch: D·ªçn d·∫πp t√†i nguy√™n v√† th√¥ng b√°o server user ƒë√£ r·ªùi ph√≤ng
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. User ƒë√≥ng tab/refresh ‚Üí beforeunload event ƒë∆∞·ª£c trigger
 * 2. G·ªçi stopAll() ‚Üí D·ªçn d·∫πp t·∫•t c·∫£ t√†i nguy√™n
 * 3. Th√¥ng b√°o server ‚Üí Server c·∫≠p nh·∫≠t database v√† th√¥ng b√°o user kh√°c
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - stopAll(): H√†m d·ªçn d·∫πp ch√≠nh, g·ªçi LeaveRoom tr√™n server
 * - MeetingHub.LeaveRoom(): Server method x·ª≠ l√Ω user r·ªùi ph√≤ng
 */
window.addEventListener('beforeunload', () => {
    // ====== G·ªåI H√ÄM D·ªåN D·∫∏P CH√çNH ======
    stopAll(); // D·ªçn d·∫πp t·∫•t c·∫£: peer connections, media streams, SignalR
    
    // L∆ØU √ù: Kh√¥ng c·∫ßn return false v√¨ modern browsers kh√¥ng cho ph√©p
    // custom message trong beforeunload dialog n·ªØa
});

// ======== HELPER FUNCTIONS FOR STATISTICS ========
/**
 * H√†m l·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi t·ª´ server
 * ƒê∆∞·ª£c g·ªçi khi c·∫ßn hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c cu·ªôc g·ªçi tr∆∞·ªõc ƒë√≥
 * M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã danh s√°ch c√°c cu·ªôc g·ªçi ƒë√£ tham gia
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. L·∫•y meetingCode t·ª´ DOM ‚Üí Ki·ªÉm tra c√≥ t·ªìn t·∫°i kh√¥ng
 * 2. G·ªçi server method GetCallHistory ‚Üí Nh·∫≠n d·ªØ li·ªáu l·ªãch s·ª≠
 * 3. Server tr·∫£ v·ªÅ ‚Üí Client x·ª≠ l√Ω v√† hi·ªÉn th·ªã
 * 
 * QUAN H·ªÜ V·ªöI SERVER:
 * - MeetingHub.GetCallHistory(): Server method tr·∫£ v·ªÅ call history
 * - CallSession model: Database entity l∆∞u th√¥ng tin cu·ªôc g·ªçi
 * - SignalR event 'CallHistory': Nh·∫≠n d·ªØ li·ªáu t·ª´ server
 */
function getCallHistory() {
    // ====== B∆Ø·ªöC 1: L·∫§Y MEETING CODE T·ª™ DOM ======
    const meetingCode = document.getElementById('video-grid')?.dataset?.meetingCode;
    
    // ====== B∆Ø·ªöC 2: KI·ªÇM TRA V√Ä G·ªåI SERVER ======
    if (meetingCode) {
        // G·ªçi SignalR method ƒë·ªÉ l·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi
        connection.invoke('GetCallHistory', meetingCode).catch(error => {
            // ====== X·ª¨ L√ù L·ªñI KHI G·ªåI SERVER ======
            console.error('Error getting call history:', error);
            // C√≥ th·ªÉ th√™m showError() ƒë·ªÉ th√¥ng b√°o user
        });
    }
    // ====== N·∫æU KH√îNG C√ì MEETING CODE ‚Üí KH√îNG L√ÄM G√å ======
    // C√≥ th·ªÉ x·∫£y ra khi g·ªçi h√†m n√†y ·ªü trang kh√¥ng ph·∫£i meeting room
}

/**
 * H√†m l·∫•y th·ªëng k√™ cu·ªôc g·ªçi t·ª´ server
 * ƒê∆∞·ª£c g·ªçi khi c·∫ßn hi·ªÉn th·ªã th√¥ng tin th·ªëng k√™ v·ªÅ cu·ªôc g·ªçi hi·ªán t·∫°i
 * M·ª•c ƒë√≠ch: Hi·ªÉn th·ªã metrics nh∆∞ th·ªùi gian, s·ªë ng∆∞·ªùi tham gia, ch·∫•t l∆∞·ª£ng
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. L·∫•y meetingCode t·ª´ DOM ‚Üí Ki·ªÉm tra c√≥ t·ªìn t·∫°i kh√¥ng
 * 2. G·ªçi server method GetCallStatistics ‚Üí Nh·∫≠n d·ªØ li·ªáu th·ªëng k√™
 * 3. Server tr·∫£ v·ªÅ ‚Üí Client x·ª≠ l√Ω v√† hi·ªÉn th·ªã
 * 
 * QUAN H·ªÜ V·ªöI SERVER:
 * - MeetingHub.GetCallStatistics(): Server method tr·∫£ v·ªÅ call stats
 * - AnalyticsEvent model: Database entity l∆∞u th√¥ng tin th·ªëng k√™
 * - SignalR event 'CallStatistics': Nh·∫≠n d·ªØ li·ªáu t·ª´ server
 * 
 * D·ªÆ LI·ªÜU C√ì TH·ªÇ BAO G·ªíM:
 * - Th·ªùi gian cu·ªôc g·ªçi
 * - S·ªë ng∆∞·ªùi tham gia
 * - Ch·∫•t l∆∞·ª£ng video/audio
 * - S·ªë l·∫ßn reconnect
 * - Bandwidth usage
 */
function getCallStatistics() {
    // ====== B∆Ø·ªöC 1: L·∫§Y MEETING CODE T·ª™ DOM ======
    const meetingCode = document.getElementById('video-grid')?.dataset?.meetingCode;
    
    // ====== B∆Ø·ªöC 2: KI·ªÇM TRA V√Ä G·ªåI SERVER ======
    if (meetingCode) {
        // G·ªçi SignalR method ƒë·ªÉ l·∫•y th·ªëng k√™ cu·ªôc g·ªçi
        connection.invoke('GetCallStatistics', meetingCode).catch(error => {
            // ====== X·ª¨ L√ù L·ªñI KHI G·ªåI SERVER ======
            console.error('Error getting call statistics:', error);
            // C√≥ th·ªÉ th√™m showError() ƒë·ªÉ th√¥ng b√°o user
        });
    }
    // ====== N·∫æU KH√îNG C√ì MEETING CODE ‚Üí KH√îNG L√ÄM G√å ======
    // C√≥ th·ªÉ x·∫£y ra khi g·ªçi h√†m n√†y ·ªü trang kh√¥ng ph·∫£i meeting room
}

// ======== QUALITY CONTROL INTEGRATION FUNCTIONS ========
/**
 * H√†m k·∫øt n·ªëi Quality Control System v·ªõi Video Call System
 * ƒê∆∞·ª£c g·ªçi t·ª´ Room.cshtml sau khi c·∫£ hai h·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o
 * M·ª•c ƒë√≠ch: Thi·∫øt l·∫≠p communication gi·ªØa hai h·ªá th·ªëng ƒë·ªôc l·∫≠p
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. Room.cshtml kh·ªüi t·∫°o qualityController ‚Üí G·ªçi setQualityController()
 * 2. L∆∞u reference v√† thi·∫øt l·∫≠p callback functions
 * 3. Khi user thay ƒë·ªïi quality ‚Üí Callback ƒë∆∞·ª£c trigger ‚Üí C·∫≠p nh·∫≠t video
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - updateVideoQualityForPeers(): ƒê∆∞·ª£c g·ªçi khi quality thay ƒë·ªïi
 * - qualityController.onQualityChange: Callback t·ª´ quality control system
 * - qualityController.onStatsUpdate: Callback cho connection stats
 */
function setQualityController(controller) {
    // ====== B∆Ø·ªöC 1: L∆ØU REFERENCE ƒê·∫æN QUALITY CONTROLLER ======
    qualityController = controller; // L∆∞u reference ƒë·ªÉ c√°c h√†m kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng

    // ====== B∆Ø·ªöC 2: THI·∫æT L·∫¨P CALLBACK FUNCTIONS ======
    if (qualityController) {
        // ====== CALLBACK 1: KHI USER THAY ƒê·ªîI QUALITY SETTING ======
        qualityController.onQualityChange = (type, quality) => {
            // type: 'video' ho·∫∑c 'audio' (hi·ªán t·∫°i ch·ªâ x·ª≠ l√Ω video)
            // quality: 'low', 'medium', 'high', 'auto'
            console.log(`üìä Quality changed: ${type} -> ${quality}`);
            
            // ====== CH·ªà X·ª¨ L√ù VIDEO QUALITY HI·ªÜN T·∫†I ======
            if (type === 'video' && localStream) {
                // G·ªçi h√†m c·∫≠p nh·∫≠t video quality cho t·∫•t c·∫£ peers
                updateVideoQualityForPeers(quality);
            }
            // TODO: C√≥ th·ªÉ th√™m x·ª≠ l√Ω audio quality sau n√†y
            // if (type === 'audio' && localStream) {
            //     updateAudioQualityForPeers(quality);
            // }
        };

        // ====== CALLBACK 2: KHI CONNECTION STATS C·∫¨P NH·∫¨T ======
        qualityController.onStatsUpdate = (stats) => {
            // stats: Object ch·ª©a th√¥ng tin v·ªÅ connection quality
            // V√≠ d·ª•: { bandwidth: 1500, latency: 50, packetLoss: 0.1 }
            console.log('üìä Connection stats updated:', stats);
            
            // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω stats n·∫øu c·∫ßn
            // V√≠ d·ª•: Auto-adjust quality d·ª±a tr√™n network conditions
            // if (stats.bandwidth < 500) {
            //     // T·ª± ƒë·ªông gi·∫£m quality n·∫øu bandwidth th·∫•p
            //     updateVideoQualityForPeers('low');
            // }
        };
    }
}

/**
 * H√†m c·∫≠p nh·∫≠t ch·∫•t l∆∞·ª£ng video cho t·∫•t c·∫£ peer connections
 * ƒê∆∞·ª£c g·ªçi khi user thay ƒë·ªïi video quality setting
 * M·ª•c ƒë√≠ch: √Åp d·ª•ng video constraints m·ªõi cho local stream
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. User thay ƒë·ªïi quality ‚Üí onQualityChange callback
 * 2. G·ªçi updateVideoQualityForPeers() ‚Üí L·∫•y quality profile
 * 3. √Åp d·ª•ng constraints ‚Üí C·∫≠p nh·∫≠t video track
 * 4. WebRTC t·ª± ƒë·ªông sync ‚Üí T·∫•t c·∫£ peers nh·∫≠n ƒë∆∞·ª£c video m·ªõi
 * 
 * QUAN H·ªÜ V·ªöI WEBRTC:
 * - applyConstraints(): WebRTC API ƒë·ªÉ thay ƒë·ªïi video constraints
 * - getVideoTracks(): L·∫•y video track t·ª´ MediaStream
 * - T·ª± ƒë·ªông sync v·ªõi t·∫•t c·∫£ peer connections
 * 
 * QUALITY PROFILES (t·ª´ quality-control.js):
 * - low: 640x360, 20fps
 * - medium: 854x480, 24fps  
 * - high: 1280x720, 30fps
 * - auto: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh
 */
function updateVideoQualityForPeers(quality) {
    // ====== B∆Ø·ªöC 1: KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN ======
    if (!qualityController || !localStream) return; 
    // Kh√¥ng c√≥ controller ho·∫∑c ch∆∞a c√≥ local stream

    // ====== B∆Ø·ªöC 2: L·∫§Y QUALITY PROFILE ======
    const profile = qualityController.qualityProfiles[quality];
    if (!profile || quality === 'auto') return; 
    // Kh√¥ng c√≥ profile ho·∫∑c auto mode (kh√¥ng c·∫ßn thay ƒë·ªïi th·ªß c√¥ng)

    // ====== B∆Ø·ªöC 3: √ÅP D·ª§NG CONSTRAINTS CHO VIDEO TRACK ======
    const videoTrack = localStream.getVideoTracks()[0]; // L·∫•y video track ƒë·∫ßu ti√™n
    if (videoTrack) {
        // L·∫•y constraints t·ª´ quality profile
        const constraints = profile.video;
        
        // √Åp d·ª•ng constraints m·ªõi cho video track
        videoTrack.applyConstraints({
            width: { ideal: constraints.width },      // Chi·ªÅu r·ªông video
            height: { ideal: constraints.height },    // Chi·ªÅu cao video
            frameRate: { ideal: constraints.frameRate } // FPS (frames per second)
        }).then(() => {
            // ====== TH√ÄNH C√îNG ======
            console.log(`‚úÖ Applied video constraints: ${constraints.width}x${constraints.height}@${constraints.frameRate}fps`);
            
            // WebRTC s·∫Ω t·ª± ƒë·ªông:
            // 1. C·∫≠p nh·∫≠t local video stream
            // 2. G·ª≠i video stream m·ªõi ƒë·∫øn t·∫•t c·∫£ peers
            // 3. Peers nh·∫≠n ƒë∆∞·ª£c video v·ªõi quality m·ªõi
            // 4. Kh√¥ng c·∫ßn reload hay reconnect
        }).catch(error => {
            // ====== TH·∫§T B·∫†I ======
            console.warn('‚ö†Ô∏è Failed to apply video constraints:', error);
            
            // C√≥ th·ªÉ x·∫£y ra khi:
            // - Camera kh√¥ng h·ªó tr·ª£ resolution n√†y
            // - Browser kh√¥ng h·ªó tr·ª£ applyConstraints API
            // - Hardware kh√¥ng ƒë·ªß m·∫°nh
            // - User ch∆∞a c·∫•p quy·ªÅn camera
        });
    }
    // ====== N·∫æU KH√îNG C√ì VIDEO TRACK ‚Üí KH√îNG L√ÄM G√å ======
    // C√≥ th·ªÉ x·∫£y ra khi user ch∆∞a b·∫≠t camera
}

// ======== CONNECTION METRICS FUNCTION ========
/**
 * H√†m l·∫•y th√¥ng tin metrics v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi hi·ªán t·∫°i
 * ƒê∆∞·ª£c g·ªçi b·ªüi c√°c h·ªá th·ªëng kh√°c ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng video call
 * M·ª•c ƒë√≠ch: Cung c·∫•p th√¥ng tin realtime v·ªÅ s·ªë l∆∞·ª£ng peers, tr·∫°ng th√°i k·∫øt n·ªëi, v√† media streams
 * 
 * LU·ªíNG HO·∫†T ƒê·ªòNG:
 * 1. ƒê·∫øm s·ªë l∆∞·ª£ng peer connections hi·ªán t·∫°i
 * 2. Ki·ªÉm tra tr·∫°ng th√°i SignalR connection
 * 3. Ki·ªÉm tra tr·∫°ng th√°i local media stream
 * 4. ƒê·∫øm s·ªë l∆∞·ª£ng video/audio tracks
 * 5. Tr·∫£ v·ªÅ object ch·ª©a t·∫•t c·∫£ th√¥ng tin
 * 
 * QUAN H·ªÜ V·ªöI C√ÅC H√ÄM KH√ÅC:
 * - Quality Control System: S·ª≠ d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã connection stats
 * - Recording System: Ki·ªÉm tra c√≥ stream ƒë·ªÉ record kh√¥ng
 * - Stats Sidebar: Hi·ªÉn th·ªã th√¥ng tin realtime
 * - Error Handling: Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi th·ª±c hi·ªán actions
 * 
 * BI·∫æN GLOBAL ƒê∆Ø·ª¢C S·ª¨ D·ª§NG:
 * - peers: Object ch·ª©a t·∫•t c·∫£ peer connections
 * - connectionState: Tr·∫°ng th√°i SignalR connection
 * - localStream: MediaStream c·ªßa user hi·ªán t·∫°i
 */
function getConnectionMetrics() {
    // ====== B∆Ø·ªöC 1: ƒê·∫æM S·ªê L∆Ø·ª¢NG PEER CONNECTIONS ======
    const peerCount = Object.keys(peers).length;
    // peers = { "peer1": SimplePeerObject, "peer2": SimplePeerObject, ... }
    // Object.keys(peers) = ["peer1", "peer2", ...]
    // .length = S·ªë l∆∞·ª£ng peer connections hi·ªán t·∫°i
    
    // ====== B∆Ø·ªöC 2: L·∫§Y TR·∫†NG TH√ÅI SIGNALR CONNECTION ======
    // connectionState c√≥ th·ªÉ l√†: 'connected', 'connecting', 'disconnected', 'reconnecting'
    // ƒê∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi updateConnectionStatus() function
    
    // ====== B∆Ø·ªöC 3: KI·ªÇM TRA TR·∫†NG TH√ÅI LOCAL STREAM ======
    const localStreamActive = localStream && localStream.active;
    // localStream: MediaStream object t·ª´ getUserMedia()
    // .active: Boolean cho bi·∫øt stream c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    // C√≥ th·ªÉ false khi: user t·∫Øt camera/mic, browser suspend, network issues
    
    // ====== B∆Ø·ªöC 4: ƒê·∫æM S·ªê L∆Ø·ª¢NG MEDIA TRACKS ======
    const streamTracks = localStream ? {
        video: localStream.getVideoTracks().length,  // S·ªë video tracks (th∆∞·ªùng l√† 1)
        audio: localStream.getAudioTracks().length   // S·ªë audio tracks (th∆∞·ªùng l√† 1)
    } : null;
    // getVideoTracks(): Tr·∫£ v·ªÅ array c√°c video tracks
    // getAudioTracks(): Tr·∫£ v·ªÅ array c√°c audio tracks
    // .length: S·ªë l∆∞·ª£ng tracks c·ªßa m·ªói lo·∫°i
    
    // ====== B∆Ø·ªöC 5: TR·∫¢ V·ªÄ OBJECT CH·ª®A T·∫§T C·∫¢ METRICS ======
    return {
        peerCount: peerCount,                    // S·ªë ng∆∞·ªùi tham gia cu·ªôc g·ªçi
        connectionState: connectionState,        // Tr·∫°ng th√°i k·∫øt n·ªëi server
        localStreamActive: localStreamActive,    // Stream c√≥ ho·∫°t ƒë·ªông kh√¥ng
        streamTracks: streamTracks               // S·ªë l∆∞·ª£ng video/audio tracks
    };
}

// ======== EXPOSE FUNCTIONS FOR QUALITY CONTROLLER ========
// M·ªü r·ªông (expose) c√°c bi·∫øn v√† h√†m ƒë·ªÉ c√°c file JavaScript kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
// Cho ph√©p quality-control.js, recording-system.js, etc. truy c·∫≠p v√†o d·ªØ li·ªáu c·ªßa videocall.js

// Cho ph√©p file kh√°c truy c·∫≠p danh s√°ch t·∫•t c·∫£ peer connections
// V√≠ d·ª•: quality-control.js c√≥ th·ªÉ d√πng window.peers ƒë·ªÉ ƒëi·ªÅu ch·ªânh ch·∫•t l∆∞·ª£ng cho t·ª´ng peer
window.peers = peers;

// Cho ph√©p file kh√°c l·∫•y stream video/audio hi·ªán t·∫°i th√¥ng qua function
// D√πng function thay v√¨ expose tr·ª±c ti·∫øp ƒë·ªÉ b·∫£o m·∫≠t v√† linh ho·∫°t h∆°n
// File kh√°c c√≥ th·ªÉ g·ªçi: window.localStream() ƒë·ªÉ l·∫•y stream hi·ªán t·∫°i
window.localStream = () => localStream;


// ======== UPDATE VIDEO GRID LAYOUT ========
// H√†m n√†y c·∫≠p nh·∫≠t th√¥ng tin s·ªë l∆∞·ª£ng video trong grid v√† h·ªó tr·ª£ CSS ƒëi·ªÅu ch·ªânh layout
// ƒê∆∞·ª£c g·ªçi khi th√™m ho·∫∑c x√≥a video ƒë·ªÉ ƒë·∫£m b·∫£o layout hi·ªÉn th·ªã ƒë√∫ng
function updateVideoGridLayout() {
    // T√¨m container ch√≠nh ch·ª©a t·∫•t c·∫£ video
    const videoGrid = document.getElementById('video-grid');
    if (!videoGrid) return; // N·∫øu kh√¥ng t√¨m th·∫•y ‚Üí tho√°t

    // ƒê·∫øm s·ªë l∆∞·ª£ng video containers hi·ªán t·∫°i
    // querySelectorAll('.video-container') t√¨m t·∫•t c·∫£ element c√≥ class video-container
    // .length tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng video
    const videoCount = videoGrid.querySelectorAll('.video-container').length;

    // C·∫≠p nh·∫≠t data-count attribute v·ªõi s·ªë l∆∞·ª£ng video
    // CSS c√≥ th·ªÉ d√πng data-count ƒë·ªÉ ƒëi·ªÅu ch·ªânh layout
    // V√≠ d·ª•: data-count="1" ‚Üí 1 video, data-count="3" ‚Üí 3 video
    videoGrid.setAttribute('data-count', videoCount);
}


