@{
    // ƒê·∫∑t ti√™u ƒë·ªÅ trang, s·∫Ω hi·ªÉn th·ªã tr√™n tab tr√¨nh duy·ªát ho·∫∑c header c·ªßa layout
    ViewData["Title"] = "Video Call Room";
}

@* Section Styles: Ch√®n CSS ri√™ng cho trang n√†y v√†o layout t·ªïng th·ªÉ (n·∫øu layout c√≥ @RenderSection("Styles")) *@
@section Styles {
    <!-- Load CSS ch√≠nh cho to√†n b·ªô trang video call -->
    <link href="~/css/pages/room-videocall.css" rel="stylesheet" />
    <style>
        /* ƒê·ªãnh d·∫°ng cho badge "Host" (ng∆∞·ªùi ch·ªß ph√≤ng) */
        .host-badge {
            background: linear-gradient(135deg, #ffd700, #ff8c00);
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: 600;
            margin-left: 10px;
            box-shadow: 0 2px 4px rgba(255, 215, 0, 0.3);
            animation: glow 2s ease-in-out infinite alternate;
        }

        /* ƒê·ªãnh d·∫°ng cho badge "Tham gia" (ng∆∞·ªùi tham d·ª±) */
        .participant-badge {
            background: linear-gradient(135deg, #4a90e2, #357abd);
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: 600;
            margin-left: 10px;
            box-shadow: 0 2px 4px rgba(74, 144, 226, 0.3);
        }

        /* ‚ú® GLOW ANIMATION - Hi·ªáu ·ª©ng ph√°t s√°ng cho host badge */
        /* Ch√∫ √Ω: D√πng @@ trong Razor ƒë·ªÉ escape th√†nh a trong CSS output */
        @@keyframes glow {
                from {
                    box-shadow: 0 2px 4px rgba(255, 215, 0, 0.3);
                }

                to {
                    box-shadow: 0 4px 8px rgba(255, 215, 0, 0.6);
                }
            }
        </style>
    }

    <div class="videocall-container">
        <!-- Ti√™u ƒë·ªÅ ph√≤ng h·ªçp, hi·ªÉn th·ªã t√™n ph√≤ng v√† badge ph√¢n bi·ªát host/tham gia -->
        <h2>üé• Ph√≤ng h·ªçp: @ViewBag.meetingName
            @if (ViewBag.IsHost == true)
            {
                <span class="host-badge">üëë Host</span>
            }
            else
            {
                <span class="participant-badge">üë§ Tham gia</span>
            }
        </h2>

        <!-- Hi·ªÉn th·ªã m√£ ph√≤ng v√† n√∫t copy m√£ ph√≤ng -->
        <div class="meeting-code-container">
            <!-- Input readonly hi·ªÉn th·ªã m√£ ph√≤ng t·ª´ ViewBag.code 
                            ID: meeting-code-input ‚Üí JavaScript s·∫Ω d√πng ƒë·ªÉ select text khi copy -->
            <input type="text" id="meeting-code-input" value="@ViewBag.code" readonly>
            <!-- Button copy m√£ ph√≤ng v√†o clipboard
                     ID: copy-code-btn ‚Üí JavaScript attach click event -->
            <button id="copy-code-btn">Copy m√£ ph√≤ng</button>
        </div>

        <!-- =========================================
         LOADING & ERROR LAYERS TR√äN M√ÄN H√åNH ROOM
         ========================================= -->

        <!-- 1Ô∏è‚É£  LOADING OVERLAY  ---------------------------------
         ‚Ä¢ ID:    loading-overlay        (JS: showLoading / hideLoading)
         ‚Ä¢ Task:  Che to√†n b·ªô m√†n h√¨nh + spinner + th√¥ng b√°o
         ‚Ä¢ M·∫∑c ƒë·ªãnh (CSS): display: none  ‚Üí ·∫©n ngay khi page render
         ‚Ä¢ Khi JS g·ªçi  showLoading()  ‚Üí display: flex (hi·ªán)
         ‚Ä¢ Khi JS g·ªçi  hideLoading()  ‚Üí display: none (·∫©n)
    --------------------------------------------------------->
        <div id="loading-overlay">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <p class="loading-message">ƒêang k·∫øt n·ªëi...</p> <!-- text ƒë∆∞·ª£c JS ghi ƒë√® -->
            </div>
        </div>
        <!-- 2Ô∏è‚É£  ERROR NOTIFICATION  -------------------------------
         ‚Ä¢ ID:    error-notification     (JS: showError / hideError)
         ‚Ä¢ Task:  Toast c·∫£nh b√°o g√≥c ph·∫£i ‚Üí b√°o l·ªói cho user
         ‚Ä¢ Inline style ‚Äúdisplay: none‚Äù   ‚Üí ·∫©n m·∫∑c ƒë·ªãnh
         ‚Ä¢ Khi JS g·ªçi  showError(msg)     ‚Üí display: block + ƒë·ªïi n·ªôi dung
         ‚Ä¢ Khi JS g·ªçi  hideError()        ‚Üí display: none
    --------------------------------------------------------->
        <div id="error-notification" style="display: none;">
            <div class="error-content">
                <span class="error-icon">‚ö†Ô∏è</span>
                <span class="error-message">C√≥ l·ªói x·∫£y ra</span> <!-- text ƒë∆∞·ª£c JS ghi ƒë√® -->
                <button class="error-close">&times;</button> <!-- onclick="hideError()" -->
            </div>
        </div>

        <!-- Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi -->
        <div id="connection-status" class="connection-status connecting">
            <span class="status-icon">üîÑ</span>
            <span class="status-text">ƒêang k·∫øt n·ªëi...</span>
        </div>

        <!-- C√°c n√∫t ƒëi·ªÅu khi·ªÉn ph√≤ng h·ªçp -->
        <div id="controls">
            <button id="toggle-mic" class="btn">üé§ Micro</button>
            <button id="toggle-cam" class="btn">üìπ Camera</button>
            <button id="share-screen" class="btn">üñ•Ô∏è Chia s·∫ª m√†n h√¨nh</button>
            <button id="toggle-quality" class="btn btn-info">‚öôÔ∏è Ch·∫•t l∆∞·ª£ng</button>
            <button id="toggle-recording" class="btn btn-success">üé• Ghi h√¨nh</button>
            <button id="toggle-whiteboard" class="btn btn-warning">üé® Whiteboard</button>
            @if (ViewBag.IsHost == true)
            {
                <button id="toggle-stats" class="btn btn-info">üìä Xem th·ªëng k√™</button>
            }
            <button id="btnLeave" class="btn" onclick="window.location.href='/Meeting'">üö™ R·ªùi ph√≤ng</button>
            @if (ViewBag.IsHost == true)
            {
                <button id="btnEnd" class="btn"
                    onclick="if(confirm('B·∫°n c√≥ mu·ªën k·∫øt th√∫c cu·ªôc h·ªçp cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi?')) window.location.href='/Meeting'">üîö
                    K·∫øt th√∫c cu·ªôc h·ªçp</button>
            }
        </div>

        <!-- Khu v·ª±c hi·ªÉn th·ªã video call, c√°c video s·∫Ω ƒë∆∞·ª£c JS render ƒë·ªông -->
        <div id="video-grid" data-meeting-code="@ViewBag.code" data-user-id="@ViewBag.UserId"></div>

        <!-- Sidebar th·ªëng k√™ cu·ªôc h·ªçp (ch·ªâ host m·ªõi xem ƒë∆∞·ª£c) -->
        <div id="stats-sidebar" class="stats-sidebar">
            <div class="sidebar-header">
                <h3>üìä Th·ªëng k√™ cu·ªôc h·ªçp</h3>
                <button id="close-stats" class="close-btn">&times;</button>
            </div>
            <div class="sidebar-content">
                <div id="stats-loading" class="loading-spinner">
                    <div class="spinner"></div>
                    <p>ƒêang t·∫£i th·ªëng k√™...</p>
                </div>
                <div id="stats-data" class="stats-data" style="display: none;">
                    <!-- N·ªôi dung th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c JS load v√†o ƒë√¢y -->
                </div>
                <div id="stats-error" class="error-message" style="display: none;">
                    <p>‚ùå Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™</p>
                    <button id="retry-stats" class="btn btn-sm btn-primary">Th·ª≠ l·∫°i</button>
                </div>
            </div>
        </div>

        <!-- Sidebar ƒëi·ªÅu ch·ªânh ch·∫•t l∆∞·ª£ng video -->
        <div id="quality-sidebar" class="stats-sidebar quality-sidebar">
            <div class="sidebar-header">
                <h3>‚öôÔ∏è Ch·∫•t l∆∞·ª£ng Video</h3>
                <button id="close-quality" class="close-btn">&times;</button>
            </div>
            <div class="sidebar-content">
                <div id="quality-content">
                    <!-- Sidebar ƒëi·ªÅu ch·ªânh ch·∫•t l∆∞·ª£ng video -->
                </div>
            </div>
        </div>

        <!-- Sidebar qu·∫£n l√Ω ghi h√¨nh, ch·ª•p ·∫£nh -->
        <div id="recording-sidebar" class="stats-sidebar recording-sidebar">
            <div class="sidebar-header">
                <h3>üé• Ghi h√¨nh & Ch·ª•p ·∫£nh</h3>
                <button id="close-recording" class="close-btn">&times;</button>
            </div>
            <div class="sidebar-content">
                <div id="recording-content">
                    <!-- N·ªôi dung ghi h√¨nh s·∫Ω ƒë∆∞·ª£c JS load v√†o ƒë√¢y -->
                </div>
            </div>
        </div>

        <!-- L·ªõp ph·ªß khi sidebar m·ªü -->
        <div id="sidebar-overlay" class="sidebar-overlay"></div>

        <!-- Khu v·ª±c b·∫£ng tr·∫Øng (whiteboard), ·∫©n/hi·ªán b·∫±ng JS -->
        <div id="whiteboard-container" class="whiteboard-container" style="display: none;">
            <!-- N·ªôi dung whiteboard s·∫Ω ƒë∆∞·ª£c JS load v√†o ƒë√¢y -->
        </div>
    </div>

    @section Scripts {
        @* ƒê√£ load SignalR ·ªü _Layout.cshtml *@
        <script src="https://cdn.jsdelivr.net/npm/simple-peer@9.11.1/simplepeer.min.js"></script>
        <script>
            // ƒê·∫∑t c√°c bi·∫øn to√†n c·ª•c cho h·ªá th·ªëng video call, ghi h√¨nh, quy·ªÅn host
            window.meetingCode = '@ViewBag.code';
            window.currentUserId = @ViewBag.UserId;
            window.isHost = @(ViewBag.IsHost?.ToString().ToLower() ?? "false");

            document.addEventListener('DOMContentLoaded', () => {

                // ============================================
                // COPY MEETING CODE FUNCTIONALITY
                // ============================================

                // 1. L·∫§Y REFERENCES ƒê·∫æN DOM ELEMENTS
                // T√¨m button copy theo ID ƒë·ªÉ attach event listener
                const btn = document.getElementById('copy-code-btn');
                // T√¨m input ch·ª©a meeting code ƒë·ªÉ select text khi copy
                const input = document.getElementById('meeting-code-input');

                // 2. ƒêƒÇNG K√ù EVENT LISTENER CHO BUTTON CLICK
                // Khi user click button copy ‚Üí execute callback function
                btn.addEventListener('click', () => {

                    // 3. SELECT TEXT TRONG INPUT
                    // Highlight to√†n b·ªô text trong input field (required ƒë·ªÉ copy)
                    // Visual: text s·∫Ω ƒë∆∞·ª£c highlight m√†u xanh
                    input.select();

                    // 4. COPY TEXT ƒê√É SELECTED V√ÄO CLIPBOARD
                    // S·ª≠ d·ª•ng legacy API ƒë·ªÉ copy text ƒë√£ selected
                    // Return: true (success) ho·∫∑c false (failed)
                    document.execCommand('copy');

                    // 5. UI FEEDBACK - THAY ƒê·ªîI TEXT BUTTON
                    // Thay ƒë·ªïi text button ngay l·∫≠p t·ª©c ƒë·ªÉ user bi·∫øt copy th√†nh c√¥ng
                    // Visual: [Copy m√£ ph√≤ng] ‚Üí [ƒê√£ copy!]
                    btn.textContent = 'ƒê√£ copy!';

                    // 6. RESET BUTTON TEXT SAU 2 GI√ÇY
                    // Sau 2000ms (2 gi√¢y) ‚Üí reset button v·ªÅ text ban ƒë·∫ßu
                    // Visual: [ƒê√£ copy!] ‚Üí wait 2s ‚Üí [Copy m√£ ph√≤ng]
                    setTimeout(() => btn.textContent = 'Copy m√£ ph√≤ng', 2000);
                });

                // Reset tr·∫°ng th√°i c√°c n√∫t sidebar khi load trang
                const qualityBtn = document.getElementById('toggle-quality');
                const recordingBtn = document.getElementById('toggle-recording');
                const statsBtn = document.getElementById('toggle-stats');

                if (qualityBtn) {
                    qualityBtn.innerHTML = '‚öôÔ∏è Ch·∫•t l∆∞·ª£ng';
                    qualityBtn.classList.remove('active');
                }

                if (recordingBtn) {
                    recordingBtn.innerHTML = 'üé• Ghi h√¨nh';
                    recordingBtn.classList.remove('active');
                }

                if (statsBtn) {
                    statsBtn.innerHTML = 'üìä Xem th·ªëng k√™';
                    statsBtn.classList.remove('active');
                }

                // ƒê·∫£m b·∫£o c√°c sidebar ƒë·ªÅu ƒë√≥ng khi load trang
                const qualitySidebar = document.getElementById('quality-sidebar');
                const recordingSidebar = document.getElementById('recording-sidebar');
                const statsSidebar = document.getElementById('stats-sidebar');
                const overlay = document.getElementById('sidebar-overlay');

                if (qualitySidebar) qualitySidebar.classList.remove('open');
                if (recordingSidebar) recordingSidebar.classList.remove('open');
                if (statsSidebar) statsSidebar.classList.remove('open');
                if (overlay) overlay.classList.remove('show');

                // Kh·ªüi t·∫°o h·ªá th·ªëng video call, quality control, recording, ... sau 0.5s
                setTimeout(() => {
                    // Kh·ªüi t·∫°o video call
                    if (typeof initializeVideoCall === 'function') {
                        initializeVideoCall().then(() => {
                            console.log('‚úÖ Video Call System initialized');
                        }).catch(error => {
                            console.error('‚ùå Failed to initialize video call:', error);
                        });
                    }

                    // Kh·ªüi t·∫°o quality control
                    if (typeof initializeQualityControl === 'function') {
                        window.qualityController = initializeQualityControl();

                        // K·∫æT N·ªêI V·ªöI VIDEO CALL SYSTEM
                        if (typeof setQualityController === 'function') {
                            setQualityController(window.qualityController);
                            console.log('üîó Quality Control connected to Video Call System');
                        }

                        console.log('‚úÖ Quality Control System initialized');
                    }

                    // Kh·ªüi t·∫°o recording system
                    if (typeof initializeRecordingSystem === 'function') {
                        window.recordingSystem = initializeRecordingSystem();
                        console.log('‚úÖ Recording System initialized');
                    }
                }, 500);
            });
        </script>

        <!-- Script ch√≠nh cho video call (ph·∫£i load ƒë·∫ßu ti√™n) -->
        <script src="~/js/videocall.js"></script>

        <!-- Script ƒëi·ªÅu khi·ªÉn ch·∫•t l∆∞·ª£ng video -->
        <script src="~/js/quality-control.js"></script>

        <!-- Script ghi h√¨nh & ch·ª•p ·∫£nh -->
        <script src="~/js/recording-system.js"></script>

        <!-- Script sidebar th·ªëng k√™ -->
        <script src="~/js/stats-sidebar.js"></script>

        <!-- Whiteboard System -->
        <link href="~/css/components/whiteboard.css" rel="stylesheet" />
        <script src="~/js/whiteboard.js"></script>
    }