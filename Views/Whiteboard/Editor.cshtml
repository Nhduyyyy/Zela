@model Zela.ViewModels.WhiteboardEditorViewModel
@{
    ViewData["Title"] = "Whiteboard Editor";
}

@section Styles {
    <link href="~/css/pages/whiteboard/whiteboard-editor.css" rel="stylesheet" />
}

<div class="whiteboard-editor">
    <!-- Top Toolbar -->
    <div class="editor-toolbar">
        <div class="toolbar-left">
            <div class="toolbar-title">@Model.WhiteboardTitle</div>
        </div>
        <div class="toolbar-actions">
            <button id="saveBtn" class="btn-toolbar btn-save">
                <span>üíæ</span>
                L∆∞u
            </button>
            <a href="@Url.Action("Index", "Whiteboard")" class="btn-toolbar btn-back">
                <span>‚Üê</span>
                Quay l·∫°i
            </a>
        </div>
    </div>

    <!-- Main Editor Area -->
    <div class="editor-main">
        <!-- Left Sidebar - Tools -->
        <div class="editor-sidebar">
            <!-- Drawing Tools -->
            <div class="sidebar-section">
                <div class="section-title">
                    <span>üñåÔ∏è</span>
                    C√¥ng c·ª• v·∫Ω
                </div>
                <div class="tools-grid">
                    <button class="tool-btn active" data-tool="pen" title="B√∫t v·∫Ω">
                        ‚úèÔ∏è
                    </button>
                    <button class="tool-btn" data-tool="eraser" title="T·∫©y">
                        üßΩ
                    </button>
                    <button class="tool-btn" data-tool="text" title="VƒÉn b·∫£n">
                        T
                    </button>
                    <button class="tool-btn" data-tool="rectangle" title="H√¨nh ch·ªØ nh·∫≠t">
                        ‚¨ú
                    </button>
                    <button class="tool-btn" data-tool="circle" title="H√¨nh tr√≤n">
                        ‚≠ï
                    </button>
                    <button class="tool-btn" data-tool="line" title="ƒê∆∞·ªùng th·∫≥ng">
                        ‚ûñ
                    </button>
                </div>
            </div>

            <!-- Color Palette -->
            <div class="sidebar-section">
                <div class="section-title">
                    <span>üé®</span>
                    M√†u s·∫Øc
                </div>
                <div class="color-palette">
                    <div class="color-btn active" data-color="#000000" style="background-color: #000000;"></div>
                    <div class="color-btn" data-color="#ff0000" style="background-color: #ff0000;"></div>
                    <div class="color-btn" data-color="#00ff00" style="background-color: #00ff00;"></div>
                    <div class="color-btn" data-color="#0000ff" style="background-color: #0000ff;"></div>
                    <div class="color-btn" data-color="#ffff00" style="background-color: #ffff00;"></div>
                    <div class="color-btn" data-color="#ff00ff" style="background-color: #ff00ff;"></div>
                    <div class="color-btn" data-color="#00ffff" style="background-color: #00ffff;"></div>
                    <div class="color-btn" data-color="#ffa500" style="background-color: #ffa500;"></div>
                    <div class="color-btn" data-color="#800080" style="background-color: #800080;"></div>
                    <div class="color-btn" data-color="#008000" style="background-color: #008000;"></div>
                    <div class="color-btn" data-color="#ffc0cb" style="background-color: #ffc0cb;"></div>
                    <div class="color-btn" data-color="#a52a2a" style="background-color: #a52a2a;"></div>
                </div>
            </div>

            <!-- Brush Sizes -->
            <div class="sidebar-section">
                <div class="section-title">
                    <span>üìè</span>
                    ƒê·ªô d√†y
                </div>
                <div class="brush-sizes">
                    <button class="size-btn active" data-size="2" title="M·ªèng"></button>
                    <button class="size-btn" data-size="5" title="Trung b√¨nh"></button>
                    <button class="size-btn" data-size="10" title="D√†y"></button>
                    <button class="size-btn" data-size="20" title="R·∫•t d√†y"></button>
                </div>
            </div>

            <!-- Actions -->
            <div class="sidebar-section">
                <div class="section-title">
                    <span>‚öôÔ∏è</span>
                    Thao t√°c
                </div>
                <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                    <button id="clearBtn" class="btn-toolbar btn-secondary" style="width: 100%;">
                        <span>üóëÔ∏è</span>
                        X√≥a t·∫•t c·∫£
                    </button>
                    <button id="undoBtn" class="btn-toolbar btn-secondary" style="width: 100%;">
                        <span>‚Ü∂</span>
                        Ho√†n t√°c
                    </button>
                    <button id="redoBtn" class="btn-toolbar btn-secondary" style="width: 100%;">
                        <span>‚Ü∑</span>
                        L√†m l·∫°i
                    </button>
                </div>
            </div>
        </div>

        <!-- Canvas Container -->
        <div class="canvas-container">
            <canvas id="whiteboardCanvas" width="1200" height="800"></canvas>
            
            <!-- Loading Overlay -->
            <div id="loadingOverlay" class="loading-overlay" style="display: none;">
                <div class="loading-spinner"></div>
            </div>
        </div>

        <!-- Right Sidebar - Session History -->
        <div class="session-sidebar">
            <div class="session-header">
                <div class="session-title">L·ªãch s·ª≠ phi√™n</div>
                <div class="session-info">@Model.SessionCount phi√™n l√†m vi·ªác</div>
            </div>
            
            <div class="session-list" id="sessionList">
                @if (Model.Sessions != null && Model.Sessions.Any())
                {
                    foreach (var session in Model.Sessions.OrderByDescending(s => s.LastModifiedAt))
                    {
                        <div class="session-item @(session.SessionId == Model.SessionId ? "active" : "")" 
                             data-session-id="@session.SessionId">
                            <div class="session-item-title">Phi√™n @session.SessionId</div>
                            <div class="session-item-date">@(session.LastModifiedAt?.ToString("dd/MM/yyyy HH:mm") ?? session.CreatedAt.ToString("dd/MM/yyyy HH:mm"))</div>
                        </div>
                    }
                }
                else
                {
                    <div style="text-align: center; color: var(--muted-text); padding: 2rem;">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem;">üìù</div>
                        <div>Ch∆∞a c√≥ phi√™n n√†o</div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Status Bar -->
    <div class="status-bar">
        <div class="status-left">
            <div class="status-indicator">
                <div class="status-dot"></div>
                <span id="connectionStatus">ƒêang k·∫øt n·ªëi...</span>
            </div>
            <div id="userCount">0 ng∆∞·ªùi d√πng</div>
        </div>
        <div id="currentTool">C√¥ng c·ª•: B√∫t v·∫Ω</div>
    </div>
</div>

<!-- Notification Container -->
<div id="notificationContainer"></div>

@section Scripts {
    <script src="~/js/whiteboard.js"></script>
    <script>
        // Initialize whiteboard with session data
        document.addEventListener('DOMContentLoaded', function() {
            const whiteboard = new Whiteboard('whiteboardCanvas', {
                sessionId: @Model.SessionId,
                whiteboardId: @Model.WhiteboardId,
                canEdit: @Model.CanEdit.ToString().ToLower()
            });

            // Load session data if available
            @if (!string.IsNullOrEmpty(Model.CanvasData))
            {
                <text>
                whiteboard.loadCanvasData('@Html.Raw(Model.CanvasData)');
                </text>
            }

            // Tool selection
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.tool-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    whiteboard.setTool(this.dataset.tool);
                    updateCurrentTool();
                });
            });

            // Color selection
            document.querySelectorAll('.color-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.color-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    whiteboard.setColor(this.dataset.color);
                });
            });

            // Size selection
            document.querySelectorAll('.size-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.size-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    whiteboard.setSize(parseInt(this.dataset.size));
                });
            });

            // Action buttons
            document.getElementById('clearBtn').addEventListener('click', function() {
                if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£?')) {
                    whiteboard.clearCanvas();
                }
            });

            document.getElementById('undoBtn').addEventListener('click', function() {
                whiteboard.undo();
            });

            document.getElementById('redoBtn').addEventListener('click', function() {
                whiteboard.redo();
            });

            // Save button
            document.getElementById('saveBtn').addEventListener('click', function() {
                whiteboard.saveCanvasData();
                showNotification('ƒê√£ l∆∞u th√†nh c√¥ng!', 'success');
            });

            // Session selection
            document.querySelectorAll('.session-item').forEach(item => {
                item.addEventListener('click', function() {
                    const sessionId = this.dataset.sessionId;
                    if (sessionId != @Model.SessionId) {
                        window.location.href = `/Whiteboard/Editor/@Model.WhiteboardId?sessionId=${sessionId}`;
                    }
                });
            });

            // Update current tool display
            function updateCurrentTool() {
                const activeTool = document.querySelector('.tool-btn.active');
                const toolNames = {
                    'pen': 'B√∫t v·∫Ω',
                    'eraser': 'T·∫©y',
                    'text': 'VƒÉn b·∫£n',
                    'rectangle': 'H√¨nh ch·ªØ nh·∫≠t',
                    'circle': 'H√¨nh tr√≤n',
                    'line': 'ƒê∆∞·ªùng th·∫≥ng'
                };
                document.getElementById('currentTool').textContent = `C√¥ng c·ª•: ${toolNames[activeTool.dataset.tool]}`;
            }

            // Show notification
            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                
                document.getElementById('notificationContainer').appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }

            // Update connection status
            function updateConnectionStatus(status, userCount = 0) {
                const statusElement = document.getElementById('connectionStatus');
                const userCountElement = document.getElementById('userCount');
                
                if (status === 'connected') {
                    statusElement.textContent = 'ƒê√£ k·∫øt n·ªëi';
                    userCountElement.textContent = `${userCount} ng∆∞·ªùi d√πng`;
                } else if (status === 'connecting') {
                    statusElement.textContent = 'ƒêang k·∫øt n·ªëi...';
                    userCountElement.textContent = '0 ng∆∞·ªùi d√πng';
                } else {
                    statusElement.textContent = 'M·∫•t k·∫øt n·ªëi';
                    userCountElement.textContent = '0 ng∆∞·ªùi d√πng';
                }
            }

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 's':
                            e.preventDefault();
                            whiteboard.saveCanvasData();
                            showNotification('ƒê√£ l∆∞u th√†nh c√¥ng!', 'success');
                            break;
                        case 'z':
                            e.preventDefault();
                            if (e.shiftKey) {
                                whiteboard.redo();
                            } else {
                                whiteboard.undo();
                            }
                            break;
                        case 'Delete':
                        case 'Backspace':
                            e.preventDefault();
                            whiteboard.clearCanvas();
                            break;
                    }
                }
            });

            // Initialize
            updateCurrentTool();
            updateConnectionStatus('connecting');
        });
    </script>
} 