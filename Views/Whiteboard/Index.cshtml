@model Zela.ViewModels.WhiteboardIndexViewModel
@{
    ViewData["Title"] = "B·∫£ng tr·∫Øng";
}

@section Styles {
    <link href="~/css/pages/whiteboard/whiteboard-index.css" rel="stylesheet" />
}

<div class="whiteboard-container">
    <!-- Header Section -->
    <div class="whiteboard-header">
        <h1>B·∫£ng tr·∫Øng</h1>
        <p>T·∫°o, qu·∫£n l√Ω v√† chia s·∫ª b·∫£ng tr·∫Øng c·ªßa b·∫°n</p>
    </div>

    <!-- Main Content -->
    <div class="whiteboard-content">
        <!-- Create New Section -->
        <div class="whiteboard-section">
            <div class="section-header">
                <div class="section-icon">+</div>
                <h2>T·∫°o m·ªõi</h2>
            </div>
            <p class="section-description">T·∫°o m·ªôt b·∫£ng tr·∫Øng m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu v·∫Ω v√† ghi ch√∫</p>
            <a href="@Url.Action("Create", "Whiteboard")" class="btn-whiteboard btn-primary">
                <span>‚ú®</span>
                T·∫°o b·∫£ng tr·∫Øng
            </a>
        </div>

        <!-- My Whiteboards Section -->
        <div class="whiteboard-section">
            <div class="section-header">
                <div class="section-icon">üìã</div>
                <h2>B·∫£ng tr·∫Øng c·ªßa t√¥i</h2>
            </div>
            
            @if (Model.MyWhiteboards.Any())
            {
                foreach (var whiteboard in Model.MyWhiteboards)
                {
                    <div class="whiteboard-item">
                        <div class="whiteboard-item-title">@whiteboard.Title</div>
                        <div class="whiteboard-item-description">@whiteboard.Description</div>
                        <div class="whiteboard-item-meta">
                            @whiteboard.CreatedAt.ToString("dd/MM/yyyy") ‚Ä¢ @whiteboard.SessionCount phi√™n ‚Ä¢ 
                            @(whiteboard.IsPublic ? "C√¥ng khai" : "Ri√™ng t∆∞")
                        </div>
                        <div class="whiteboard-actions">
                            <a href="@Url.Action("Editor", "Whiteboard", new { id = whiteboard.WhiteboardId })" 
                               class="btn-action btn-open">M·ªü</a>
                            <a href="@Url.Action("TogglePublic", "Whiteboard", new { id = whiteboard.WhiteboardId })" 
                               class="btn-action btn-hide">@(whiteboard.IsPublic ? "·∫®n" : "C√¥ng khai")</a>
                            <a href="@Url.Action("Delete", "Whiteboard", new { id = whiteboard.WhiteboardId })" 
                               class="btn-action btn-delete" 
                               onclick="return confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫£ng tr·∫Øng n√†y?')">X√≥a</a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <div class="empty-state-text">Ch∆∞a c√≥ b·∫£ng tr·∫Øng n√†o ƒë∆∞·ª£c t·∫°o</div>
                </div>
            }
        </div>

        <!-- Templates Section -->
        <div class="whiteboard-section">
            <div class="section-header">
                <div class="section-icon">üìÑ</div>
                <h2>T·ª´ template</h2>
            </div>
            <p class="section-description">S·ª≠ d·ª•ng template c√≥ s·∫µn ƒë·ªÉ b·∫Øt ƒë·∫ßu nhanh ch√≥ng</p>
            
            <!-- Search and Filter -->
            <div class="search-filter-container">
                <input type="text" class="search-input" placeholder="T√¨m ki·∫øm b·∫£ng tr·∫Øng..." id="searchInput">
                <select class="filter-select" id="filterSelect">
                    <option value="all">T·∫•t c·∫£</option>
                    <option value="public">C√¥ng khai</option>
                    <option value="private">Ri√™ng t∆∞</option>
                    <option value="template">Template</option>
                </select>
            </div>

            @if (Model.PublicTemplates.Any())
            {
                foreach (var template in Model.PublicTemplates)
                {
                    <div class="whiteboard-item">
                        <div class="whiteboard-item-title">@template.Title</div>
                        <div class="whiteboard-item-description">@template.Description</div>
                        <div class="whiteboard-item-meta">
                            @template.CreatedAt.ToString("dd/MM/yyyy") ‚Ä¢ @template.SessionCount phi√™n ‚Ä¢ Template
                        </div>
                        <div class="whiteboard-actions">
                            <a href="@Url.Action("Editor", "Whiteboard", new { id = template.WhiteboardId })" 
                               class="btn-action btn-open">M·ªü</a>
                            <a href="@Url.Action("Clone", "Whiteboard", new { id = template.WhiteboardId })" 
                               class="btn-action btn-hide">Sao ch√©p</a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">üìÑ</div>
                    <div class="empty-state-text">Ch∆∞a c√≥ template c√¥ng khai n√†o ƒë∆∞·ª£c t·∫°o</div>
                </div>
            }
        </div>

        <!-- Recent Sessions Section -->
        <div class="whiteboard-section">
            <div class="section-header">
                <div class="section-icon">üîÑ</div>
                <h2>Phi√™n g·∫ßn ƒë√¢y</h2>
            </div>
            <p class="section-description">Ti·∫øp t·ª•c l√†m vi·ªác v·ªõi c√°c phi√™n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥</p>
            
            @if (Model.RecentSessions.Any())
            {
                foreach (var session in Model.RecentSessions)
                {
                    <div class="whiteboard-item">
                        <div class="whiteboard-item-title">@session.Title</div>
                        <div class="whiteboard-item-description">@session.Description</div>
                        <div class="whiteboard-item-meta">
                            @(session.LastModifiedAt?.ToString("dd/MM/yyyy HH:mm") ?? session.CreatedAt.ToString("dd/MM/yyyy HH:mm"))
                        </div>
                        <div class="whiteboard-actions">
                            <a href="@Url.Action("Editor", "Whiteboard", new { id = session.WhiteboardId })" 
                               class="btn-action btn-open">Ti·∫øp t·ª•c</a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">‚è∞</div>
                    <div class="empty-state-text">Ch∆∞a c√≥ phi√™n l√†m vi·ªác n√†o</div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const items = document.querySelectorAll('.whiteboard-item');
            
            items.forEach(item => {
                const title = item.querySelector('.whiteboard-item-title').textContent.toLowerCase();
                const description = item.querySelector('.whiteboard-item-description').textContent.toLowerCase();
                
                if (title.includes(searchTerm) || description.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Filter functionality
        document.getElementById('filterSelect').addEventListener('change', function() {
            const filterValue = this.value;
            const items = document.querySelectorAll('.whiteboard-item');
            
            items.forEach(item => {
                const meta = item.querySelector('.whiteboard-item-meta').textContent.toLowerCase();
                
                if (filterValue === 'all' || 
                    (filterValue === 'public' && meta.includes('c√¥ng khai')) ||
                    (filterValue === 'private' && meta.includes('ri√™ng t∆∞')) ||
                    (filterValue === 'template' && meta.includes('template'))) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Add smooth animations on page load
        document.addEventListener('DOMContentLoaded', function() {
            const sections = document.querySelectorAll('.whiteboard-section');
            sections.forEach((section, index) => {
                section.style.animationDelay = `${index * 0.1}s`;
            });
        });
    </script>
} 