@model Zela.ViewModels.CreateWhiteboardViewModel
@{
    ViewData["Title"] = "T·∫°o b·∫£ng tr·∫Øng m·ªõi";
}

@section Styles {
    <link href="~/css/pages/whiteboard/whiteboard-create.css" rel="stylesheet" />
}

<div class="create-whiteboard-container">
    <div class="create-form-container">
        <!-- Header -->
        <div class="create-header">
            <h1>üé® T·∫°o b·∫£ng tr·∫Øng m·ªõi</h1>
            <p>B·∫Øt ƒë·∫ßu t·∫°o b·∫£ng tr·∫Øng ƒë·ªÉ v·∫Ω, ghi ch√∫ v√† chia s·∫ª √Ω t∆∞·ªüng c·ªßa b·∫°n</p>
        </div>

        <!-- Form -->
        <form asp-action="Create" method="post" class="create-form">
            @Html.AntiForgeryToken()
            
            <!-- Room Info (if creating from meeting) -->
            @if (Model.RoomId.HasValue && Model.RoomId > 0)
            {
                <div class="room-info">
                    <div class="room-icon">üìπ</div>
                    <div class="room-text">
                        ƒêang t·∫°o b·∫£ng tr·∫Øng cho cu·ªôc h·ªçp: <span class="room-id">Room #@Model.RoomId</span>
                    </div>
                </div>
            }

            <!-- Title -->
            <div class="form-group">
                <label asp-for="Title" class="form-label">T√™n b·∫£ng tr·∫Øng *</label>
                <input asp-for="Title" class="form-input" placeholder="Nh·∫≠p t√™n b·∫£ng tr·∫Øng..." />
                <span asp-validation-for="Title" class="validation-message"></span>
            </div>

            <!-- Description -->
            <div class="form-group">
                <label asp-for="Description" class="form-label">M√¥ t·∫£</label>
                <textarea asp-for="Description" class="form-input form-textarea" 
                          placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ b·∫£ng tr·∫Øng n√†y..."></textarea>
                <span asp-validation-for="Description" class="validation-message"></span>
            </div>

            <!-- Hidden RoomId -->
            <input asp-for="RoomId" type="hidden" />

            <!-- Options -->
            <div class="form-group">
                <label class="form-label">T√πy ch·ªçn</label>
                <div class="checkbox-group">
                    <div class="checkbox-item">
                        <input asp-for="IsPublic" type="checkbox" class="checkbox-input" id="isPublic" />
                        <div>
                            <label for="isPublic" class="checkbox-label">C√¥ng khai</label>
                            <div class="checkbox-description">Cho ph√©p ng∆∞·ªùi kh√°c xem v√† s·ª≠ d·ª•ng b·∫£ng tr·∫Øng n√†y</div>
                        </div>
                    </div>
                    
                    <div class="checkbox-item">
                        <input asp-for="IsTemplate" type="checkbox" class="checkbox-input" id="isTemplate" />
                        <div>
                            <label for="isTemplate" class="checkbox-label">L√†m template</label>
                            <div class="checkbox-description">S·ª≠ d·ª•ng l√†m m·∫´u cho c√°c b·∫£ng tr·∫Øng kh√°c</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <a href="@Url.Action("Index", "Whiteboard")" class="btn-create btn-secondary">
                    <span>‚Üê</span>
                    H·ªßy
                </a>
                <button type="submit" class="btn-create btn-primary">
                    <span>‚ú®</span>
                    T·∫°o b·∫£ng tr·∫Øng
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.create-form');
            const submitBtn = form.querySelector('button[type="submit"]');
            
            // Form validation
            form.addEventListener('submit', function(e) {
                const title = document.getElementById('Title').value.trim();
                const description = document.getElementById('Description').value.trim();
                
                // Clear previous validation messages
                document.querySelectorAll('.validation-message').forEach(msg => msg.style.display = 'none');
                document.querySelectorAll('.form-input').forEach(input => input.classList.remove('field-validation-error'));
                
                let isValid = true;
                
                // Validate title
                if (!title) {
                    showValidationError('Title', 'Vui l√≤ng nh·∫≠p t√™n b·∫£ng tr·∫Øng');
                    isValid = false;
                } else if (title.length > 200) {
                    showValidationError('Title', 'T√™n b·∫£ng tr·∫Øng kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±');
                    isValid = false;
                }
                
                // Validate description
                if (description.length > 1000) {
                    showValidationError('Description', 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±');
                    isValid = false;
                }
                
                if (!isValid) {
                    e.preventDefault();
                    return false;
                }
                
                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="loading-spinner" style="width: 16px; height: 16px; border: 2px solid transparent; border-top: 2px solid currentColor; border-radius: 50%; animation: spin 1s linear infinite;"></span> ƒêang t·∫°o...';
            });
            
            function showValidationError(fieldName, message) {
                const field = document.getElementById(fieldName);
                const validationSpan = field.nextElementSibling;
                
                field.classList.add('field-validation-error');
                validationSpan.textContent = message;
                validationSpan.style.display = 'flex';
            }
            
            // Auto-resize textarea
            const textarea = document.getElementById('Description');
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 200) + 'px';
            });
            
            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'Enter':
                            e.preventDefault();
                            form.submit();
                            break;
                        case 'Escape':
                            e.preventDefault();
                            window.location.href = '@Url.Action("Index", "Whiteboard")';
                            break;
                    }
                }
            });
            
            // Focus on title field
            document.getElementById('Title').focus();
        });
    </script>
} 