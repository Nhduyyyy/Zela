@model IEnumerable<Zela.Models.User>

@{
    ViewData["Title"] = "Quản lý người dùng";
}

<!-- Page Header -->
<div class="users-header">
    <h1>Quản lý người dùng</h1>
    <p>Quản lý và giám sát hệ thống Zela</p>
</div>

<!-- Search and Filters -->
<div class="search-filter-bar">
    <div class="search-input">
        <i class="bi bi-search"></i>
        <input type="text" id="searchInput" placeholder="Tìm kiếm theo tên hoặc email...">
    </div>
    
    <div class="filter-group">
        <select class="filter-select" id="roleFilter">
            <option value="">Tất cả vai trò</option>
            <option value="admin">Admin</option>
            <option value="user">User</option>
        </select>
        <select class="filter-select" id="statusFilter">
            <option value="">Tất cả trạng thái</option>
            <option value="active">Hoạt động</option>
            <option value="locked">Đã khóa</option>
        </select>
    </div>
    
    <div class="action-buttons">
        <button class="btn-add-user">
            <i class="bi bi-person-plus"></i>
            Thêm người dùng
        </button>
        <button class="btn-export">
            <i class="bi bi-download"></i>
            Xuất Excel
        </button>
    </div>
</div>

<!-- Users Grid -->
<div class="users-grid" id="usersContainer">
    @foreach (var user in Model)
    {
        <div class="user-card" 
             data-role="@(user.Roles.Any(r => r.RoleName == "Admin") ? "admin" : "user")"
             data-premium="@(user.IsPremium ? "true" : "false")"
             data-search="@user.FullName?.ToLower() @user.Email.ToLower()">
            
            <!-- User Avatar -->
            <img src="@(user.AvatarUrl ?? "/images/default-avatar.jpeg")" 
                 alt="@user.FullName" 
                 class="user-avatar">
            
            <!-- User Info -->
            <div class="user-info">
                <div class="user-name">@(string.IsNullOrEmpty(user.FullName) ? "Chưa đặt tên" : user.FullName)</div>
                <div class="user-email">@user.Email</div>
                <div class="user-role-badge @(user.Roles.Any(r => r.RoleName == "Admin") ? "admin" : "user")">
                    @if (user.Roles.Any(r => r.RoleName == "Admin"))
                    {
                        <i class="bi bi-shield-check"></i>
                        <span>Admin</span>
                    }
                    else
                    {
                        <i class="bi bi-person"></i>
                        <span>User</span>
                    }
                </div>
                
                @if (user.IsPremium)
                {
                    <div class="user-role-badge premium">
                        <i class="bi bi-star-fill"></i>
                        <span>Premium</span>
                    </div>
                }
            </div>

            <!-- User Meta -->
            <div class="user-meta">
                <div class="user-meta-item">
                    <span class="user-meta-label">ID</span>
                    <span class="user-meta-value">@user.UserId</span>
                </div>
                <div class="user-meta-item">
                    <span class="user-meta-label">Tham gia</span>
                    <span class="user-meta-value">@user.CreatedAt.ToString("dd/MM")</span>
                </div>
                <div class="user-meta-item">
                    <span class="user-meta-label">Đăng nhập</span>
                    <span class="user-meta-value">@user.LastLoginAt.ToString("dd/MM")</span>
                </div>
            </div>

            <!-- User Actions -->
            <div class="user-actions">
                <button class="user-action-btn secondary" onclick="viewUserDetails(@user.UserId)">
                    <i class="bi bi-eye"></i>
                    Chi tiết
                </button>
                <button class="user-action-btn secondary" onclick="editUser(@user.UserId)">
                    <i class="bi bi-pencil"></i>
                    Sửa
                </button>
                <button class="user-action-btn secondary" onclick="sendNotification(@user.UserId, '@user.FullName')">
                    <i class="bi bi-bell"></i>
                    Thông báo
                </button>
                
                @if (!user.Roles.Any(r => r.RoleName == "Locked"))
                {
                    <button class="user-action-btn secondary" onclick="lockUser(@user.UserId, '@user.FullName')">
                        <i class="bi bi-lock"></i>
                        Khóa
                    </button>
                }
                else
                {
                    <button class="user-action-btn secondary" onclick="unlockUser(@user.UserId, '@user.FullName')">
                        <i class="bi bi-unlock"></i>
                        Mở khóa
                    </button>
                }
                
                @if (!user.Roles.Any(r => r.RoleName == "Admin"))
                {
                    <form asp-action="Promote" method="post" class="d-inline">
                        <input type="hidden" name="userId" value="@user.UserId" />
                        <button type="submit" class="user-action-btn" 
                                onclick="return confirm('Bạn có chắc muốn cấp quyền Admin cho người dùng này?')">
                            <i class="bi bi-arrow-up-circle"></i>
                            Set Admin
                        </button>
                    </form>
                }
                else
                {
                    <form asp-action="Demote" method="post" class="d-inline">
                        <input type="hidden" name="userId" value="@user.UserId" />
                        <button type="submit" class="user-action-btn secondary" 
                                onclick="return confirm('Bạn có chắc muốn gỡ quyền Admin của người dùng này?')">
                            <i class="bi bi-arrow-down-circle"></i>
                            Remove Admin
                        </button>
                    </form>
                }
                
                <button class="user-action-btn danger" onclick="deleteUser(@user.UserId, '@user.FullName')">
                    <i class="bi bi-trash"></i>
                    Xóa
                </button>
            </div>
        </div>
    }
</div>

<!-- Empty State -->
<div id="emptyState" style="display: none;" class="text-center py-5">
    <i class="bi bi-search" style="font-size: 3rem; color: var(--text-secondary);"></i>
    <h4 class="mt-3" style="color: var(--text-secondary);">Không tìm thấy người dùng nào</h4>
    <p style="color: var(--text-secondary);">Thử thay đổi từ khóa tìm kiếm hoặc bộ lọc</p>
</div>

<!-- Modals -->
<!-- Send Notification Modal -->
<div class="modal-overlay" id="notificationModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Gửi thông báo</h5>
            <button type="button" class="modal-close" onclick="closeModal('notificationModal')">&times;</button>
        </div>
        <div class="modal-body">
            <form id="notificationForm">
                <input type="hidden" id="notificationUserId" />
                <div class="form-group">
                    <label class="form-label">Người nhận:</label>
                    <span id="notificationUserName" style="font-weight: 600; color: var(--text-primary);"></span>
                </div>
                <div class="form-group">
                    <label for="notificationTitle" class="form-label">Tiêu đề:</label>
                    <input type="text" class="form-control" id="notificationTitle" required>
                </div>
                <div class="form-group">
                    <label for="notificationContent" class="form-label">Nội dung:</label>
                    <textarea class="form-control" id="notificationContent" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label for="notificationType" class="form-label">Loại:</label>
                    <select class="form-select" id="notificationType">
                        <option value="Info">Thông tin</option>
                        <option value="Warning">Cảnh báo</option>
                        <option value="Success">Thành công</option>
                        <option value="Error">Lỗi</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-cancel" onclick="closeModal('notificationModal')">Hủy</button>
            <button type="button" class="btn-save" onclick="submitNotification()">Gửi</button>
        </div>
    </div>
</div>

<!-- Lock User Modal -->
<div class="modal-overlay" id="lockModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Khóa tài khoản</h5>
            <button type="button" class="modal-close" onclick="closeModal('lockModal')">&times;</button>
        </div>
        <div class="modal-body">
            <form id="lockForm">
                <input type="hidden" id="lockUserId" />
                <div class="form-group">
                    <label class="form-label">Người dùng:</label>
                    <span id="lockUserName" style="font-weight: 600; color: var(--text-primary);"></span>
                </div>
                <div class="form-group">
                    <label for="lockReason" class="form-label">Lý do khóa:</label>
                    <textarea class="form-control" id="lockReason" rows="3" placeholder="Nhập lý do khóa tài khoản..."></textarea>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-cancel" onclick="closeModal('lockModal')">Hủy</button>
            <button type="button" class="btn-save" onclick="submitLock()">Khóa tài khoản</button>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
<div class="modal-overlay" id="deleteModal">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Xóa người dùng</h5>
            <button type="button" class="modal-close" onclick="closeModal('deleteModal')">&times;</button>
        </div>
        <div class="modal-body">
            <form id="deleteForm">
                <input type="hidden" id="deleteUserId" />
                <div class="form-group">
                    <label class="form-label">Người dùng:</label>
                    <span id="deleteUserName" style="font-weight: 600; color: var(--text-primary);"></span>
                </div>
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 12px; padding: 1rem; margin-bottom: 1rem;">
                    <i class="bi bi-exclamation-triangle" style="color: #856404;"></i>
                    <strong style="color: #856404;">Cảnh báo:</strong> 
                    <span style="color: #856404;">Hành động này sẽ xóa người dùng khỏi hệ thống. Dữ liệu sẽ không thể khôi phục.</span>
                </div>
                <div class="form-group">
                    <label for="deleteReason" class="form-label">Lý do xóa:</label>
                    <textarea class="form-control" id="deleteReason" rows="3" placeholder="Nhập lý do xóa người dùng..." required></textarea>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-cancel" onclick="closeModal('deleteModal')">Hủy</button>
            <button type="button" class="btn-save danger" onclick="submitDelete()">Xóa người dùng</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const userCards = document.querySelectorAll('.user-card');
            
            userCards.forEach(card => {
                const searchData = card.getAttribute('data-search');
                if (searchData.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
            
            updateEmptyState();
        });

        // Filter functionality
        document.getElementById('roleFilter').addEventListener('change', filterUsers);
        document.getElementById('statusFilter').addEventListener('change', filterUsers);

        function filterUsers() {
            const roleFilter = document.getElementById('roleFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const userCards = document.querySelectorAll('.user-card');
            
            userCards.forEach(card => {
                const userRole = card.getAttribute('data-role');
                const isPremium = card.getAttribute('data-premium') === 'true';
                
                let showCard = true;
                
                if (roleFilter && userRole !== roleFilter) {
                    showCard = false;
                }
                
                if (statusFilter === 'premium' && !isPremium) {
                    showCard = false;
                }
                
                card.style.display = showCard ? 'block' : 'none';
            });
            
            updateEmptyState();
        }

        function updateEmptyState() {
            const visibleCards = document.querySelectorAll('.user-card[style*="display: block"], .user-card:not([style*="display: none"])');
            const emptyState = document.getElementById('emptyState');
            
            if (visibleCards.length === 0) {
                emptyState.style.display = 'block';
            } else {
                emptyState.style.display = 'none';
            }
        }

        // Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('show');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // User action functions
        function viewUserDetails(userId) {
            window.location.href = `/Admin/UserDetails/${userId}`;
        }

        function editUser(userId) {
            // Implement edit user functionality
            alert('Chức năng sửa người dùng sẽ được triển khai sau');
        }

        function sendNotification(userId, userName) {
            document.getElementById('notificationUserId').value = userId;
            document.getElementById('notificationUserName').textContent = userName;
            openModal('notificationModal');
        }

        function lockUser(userId, userName) {
            document.getElementById('lockUserId').value = userId;
            document.getElementById('lockUserName').textContent = userName;
            openModal('lockModal');
        }

        function unlockUser(userId, userName) {
            if (confirm(`Bạn có chắc muốn mở khóa tài khoản của ${userName}?`)) {
                // Implement unlock functionality
                alert('Chức năng mở khóa sẽ được triển khai sau');
            }
        }

        function deleteUser(userId, userName) {
            document.getElementById('deleteUserId').value = userId;
            document.getElementById('deleteUserName').textContent = userName;
            openModal('deleteModal');
        }

        function submitNotification() {
            // Implement notification submission
            alert('Chức năng gửi thông báo sẽ được triển khai sau');
            closeModal('notificationModal');
        }

        function submitLock() {
            // Implement lock submission
            alert('Chức năng khóa tài khoản sẽ được triển khai sau');
            closeModal('lockModal');
        }

        function submitDelete() {
            // Implement delete submission
            alert('Chức năng xóa người dùng sẽ được triển khai sau');
            closeModal('deleteModal');
        }

        // Close modals when clicking outside
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    this.classList.remove('show');
                }
            });
        });
    </script>
} 