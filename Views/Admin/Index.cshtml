@model IEnumerable<Zela.Models.User>

@{
    ViewData["Title"] = "Dashboard";
    Layout="~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <!-- Dashboard styles are loaded from dashboard.css -->
}

<!-- Welcome Card -->
<div class="welcome-card">
    <div class="content">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h2>Ch√†o m·ª´ng tr·ªü l·∫°i, @(Context.Session.GetString("FullName") ?? "Admin")! üëã</h2>
                <p>H√¥m nay l√† @DateTime.Now.ToString("dddd, dd/MM/yyyy"). ƒê√¢y l√† t·ªïng quan v·ªÅ h·ªá th·ªëng Zela c·ªßa b·∫°n.</p>
            </div>
            <div class="col-md-4 text-end">
                <i class="bi bi-graph-up-arrow" style="font-size: 4rem; opacity: 0.3;"></i>
            </div>
        </div>
    </div>
</div>

<!-- Statistics Grid -->
<div class="stats-grid">
    <!-- Users Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-people-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.UserCount</div>
        <div class="stat-label">T·ªïng s·ªë ng∆∞·ªùi d√πng</div>
        <div class="stat-change positive">
            <i class="bi bi-arrow-up"></i>
            <span>@ViewBag.UserNewToday ng∆∞·ªùi m·ªõi h√¥m nay</span>
        </div>
        <div class="stat-change">
            <span>Online: <b>@ViewBag.UserOnline</b></span>
        </div>
    </div>
    <!-- New Users Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-person-plus-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.UserNewWeek</div>
        <div class="stat-label">User m·ªõi tu·∫ßn n√†y</div>
        <div class="stat-change">
            <span>Th√°ng: <b>@ViewBag.UserNewMonth</b></span>
        </div>
    </div>
    <!-- Groups Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-chat-dots-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.GroupCount</div>
        <div class="stat-label">Nh√≥m chat ho·∫°t ƒë·ªông</div>
    </div>
    <!-- Video Rooms Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-camera-video-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.RoomCount</div>
        <div class="stat-label">Ph√≤ng h·ªçp tr·ª±c tuy·∫øn</div>
    </div>
    <!-- Messages Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-chat-text-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.MessageCount</div>
        <div class="stat-label">Tin nh·∫Øn ƒë√£ g·ª≠i</div>
    </div>
    <!-- Stickers Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-emoji-smile-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.StickerCount</div>
        <div class="stat-label">Sticker c√≥ s·∫µn</div>
    </div>
    <!-- File Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-file-earmark-arrow-up"></i>
        </div>
        <div class="stat-number">@ViewBag.FileCount</div>
        <div class="stat-label">File ƒë√£ upload</div>
        <div class="stat-change">
            <span>Dung l∆∞·ª£ng: <b>@((ViewBag.FileSize/1024/1024).ToString("N2")) MB</b></span>
        </div>
    </div>
    <!-- Revenue Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-cash-coin"></i>
        </div>
        <div class="stat-number">@ViewBag.TotalRevenue.ToString("N0") ‚Ç´</div>
        <div class="stat-label">T·ªïng doanh thu</div>
        <div class="stat-change">
            <span>H√¥m nay: <b>@ViewBag.RevenueToday.ToString("N0") ‚Ç´</b></span>
            <span>Tu·∫ßn: <b>@ViewBag.RevenueWeek.ToString("N0") ‚Ç´</b></span>
            <span>Th√°ng: <b>@ViewBag.RevenueMonth.ToString("N0") ‚Ç´</b></span>
        </div>
    </div>
    <!-- Report Card -->
    <div class="stat-card">
        <div class="stat-icon">
            <i class="bi bi-flag-fill"></i>
        </div>
        <div class="stat-number">@ViewBag.ReportCount</div>
        <div class="stat-label">B√°o c√°o vi ph·∫°m</div>
    </div>
</div>

<!-- Content Row -->
<div class="row mt-4">
    <!-- System Status -->
    <div class="col-md-6 mb-4">
        <div class="recent-activity">
            <h4 class="admin-mb-lg">
                <i class="bi bi-server text-primary me-2"></i>
                Tr·∫°ng th√°i h·ªá th·ªëng
            </h4>
            @foreach (var s in (IEnumerable<dynamic>)ViewBag.SystemStatus)
            {
                <div class="activity-item">
                    <div class="activity-icon">
                        <i class="bi bi-server"></i>
                    </div>
                    <div class="activity-content">
                        <strong>@s.Name</strong>
                        <span>@s.Status</span>
                    </div>
                    <div class="activity-time">@s.Level</div>
                </div>
            }
        </div>
    </div>
    <!-- Recent Activity -->
    <div class="col-md-6 mb-4">
        <div class="recent-activity">
            <h4 class="admin-mb-lg">
                <i class="bi bi-clock-history text-info me-2"></i>
                Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
            </h4>
            @if (ViewBag.RecentActivity != null)
            {
                foreach (var act in (IEnumerable<dynamic>)ViewBag.RecentActivity)
                {
                    <div class="activity-item">
                        <div class="activity-icon">
                            <i class="@act.Icon"></i>
                        </div>
                        <div class="activity-content">
                            <strong>@act.Title</strong>
                            <span>@act.Description</span>
                        </div>
                        <div class="activity-time">@act.CreatedAt.ToString("dd/MM HH:mm")</div>
                    </div>
                }
            }
            else
            {
                <div class="activity-item">
                    <div class="activity-icon">
                        <i class="bi bi-info-circle"></i>
                    </div>
                    <div class="activity-content">
                        <span>Kh√¥ng c√≥ ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y.</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Quick Reports & Top Lists -->
<div class="row mt-4">
    <div class="col-md-4 mb-4">
        <div class="recent-activity">
            <h3><i class="bi bi-person-lines-fill"></i> Top User ho·∫°t ƒë·ªông</h3>
            <ul class="list-unstyled mb-0">
                @if (ViewBag.TopUsers != null)
                {
                    @foreach (var u in (IEnumerable<Zela.Models.User>)ViewBag.TopUsers)
                    {
                        <li class="mb-2"><b>@u.FullName</b> - @u.Email <span class="text-muted">(@u.LastLoginAt.ToString("dd/MM/yyyy"))</span></li>
                    }
                }
                else
                {
                    <li class="mb-2 text-muted">Ch∆∞a c√≥ d·ªØ li·ªáu user</li>
                }
            </ul>
        </div>
    </div>
    <div class="col-md-4 mb-4">
        <div class="recent-activity">
            <h3><i class="bi bi-people"></i> Top Nh√≥m s√¥i ƒë·ªông</h3>
            <ul class="list-unstyled mb-0">
                @if (ViewBag.TopGroups != null)
                {
                    @foreach (var g in (IEnumerable<Zela.Models.ChatGroup>)ViewBag.TopGroups)
                    {
                        <li class="mb-2"><b>@g.Name</b> - @(g.Members?.Count ?? 0) th√†nh vi√™n</li>
                    }
                }
                else
                {
                    <li class="mb-2 text-muted">Ch∆∞a c√≥ d·ªØ li·ªáu nh√≥m</li>
                }
            </ul>
        </div>
    </div>
    <div class="col-md-4 mb-4">
        <div class="recent-activity">
            <h3><i class="bi bi-clipboard-data"></i> Top Quiz nhi·ªÅu l∆∞·ª£t l√†m</h3>
            <ul class="list-unstyled mb-0">
                @if (ViewBag.TopQuiz != null)
                {
                    @foreach (var q in (IEnumerable<Zela.Models.Quiz>)ViewBag.TopQuiz)
                    {
                        <li class="mb-2"><b>@q.Title</b> - @(q.Attempts?.Count ?? 0) l∆∞·ª£t l√†m</li>
                    }
                }
                else
                {
                    <li class="mb-2 text-muted">Ch∆∞a c√≥ d·ªØ li·ªáu quiz</li>
                }
            </ul>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="quick-actions">
    <a asp-action="Users" class="quick-action-btn">
        <i class="bi bi-people-fill"></i>
        <span>Qu·∫£n l√Ω Users</span>
    </a>
    <a asp-action="Groups" class="quick-action-btn">
        <i class="bi bi-chat-dots-fill"></i>
        <span>Chat Groups</span>
    </a>
    <a href="#" class="quick-action-btn">
        <i class="bi bi-bar-chart-fill"></i>
        <span>B√°o c√°o</span>
    </a>
    <a href="#" class="quick-action-btn">
        <i class="bi bi-gear-fill"></i>
        <span>C√†i ƒë·∫∑t</span>
    </a>
</div>

<!-- Charts Section (placeholder) -->
<div class="row mt-4">
    <div class="col-12">
        <div class="chart-card">
            <h3><i class="bi bi-graph-up"></i> Th·ªëng k√™ bi·ªÉu ƒë·ªì</h3>
            <div class="chart-container">
                <canvas id="dashboardChart" height="80"></canvas>
                <div class="text-muted small mt-2">(Bi·ªÉu ƒë·ªì s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·ªü c√°c b∆∞·ªõc ti·∫øp theo)</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Real-time clock
        function updateClock() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('vi-VN');
            document.title = `Dashboard - ${timeString} - Zela Admin`;
        }
        setInterval(updateClock, 1000);
        updateClock();

        // Animate numbers (counter)
        function animateValue(element, start, end, duration) {
            let startTimestamp = null;
            const step = (timestamp) => {
                if (!startTimestamp) startTimestamp = timestamp;
                const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                element.innerHTML = Math.floor(progress * (end - start) + start);
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }
        document.addEventListener('DOMContentLoaded', function() {
            const statValues = document.querySelectorAll('.stat-number');
            statValues.forEach(element => {
                const finalValue = parseInt(element.textContent.replace(/[^0-9]/g, ''));
                element.textContent = '0';
                setTimeout(() => {
                    animateValue(element, 0, finalValue, 1500);
                }, 300);
            });
        });

        // Chart.js - Dashboard chart
        let dashboardChart;
        async function loadDashboardChart(range = 'month') {
            const ctx = document.getElementById('dashboardChart').getContext('2d');
            const res = await fetch(`/Admin/GetDashboardChartData?range=${range}`);
            const data = await res.json();
            if (dashboardChart) dashboardChart.destroy();
            dashboardChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [
                        {
                            label: 'User m·ªõi',
                            data: data.userSeries,
                            borderColor: '#2563eb',
                            backgroundColor: 'rgba(37,99,235,0.1)',
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'Nh√≥m m·ªõi',
                            data: data.groupSeries,
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16,185,129,0.1)',
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'Doanh thu',
                            data: data.revenueSeries,
                            borderColor: '#f59e42',
                            backgroundColor: 'rgba(245,158,66,0.1)',
                            tension: 0.3,
                            fill: true,
                            yAxisID: 'y1'
                        },
                        {
                            label: 'Tin nh·∫Øn',
                            data: data.messageSeries,
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99,102,241,0.1)',
                            tension: 0.3,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    interaction: { mode: 'index', intersect: false },
                    stacked: false,
                    plugins: {
                        legend: { display: true },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'S·ªë l∆∞·ª£ng' }
                        },
                        y1: {
                            beginAtZero: true,
                            position: 'right',
                            title: { display: true, text: 'Doanh thu (‚Ç´)' },
                            grid: { drawOnChartArea: false }
                        }
                    },
                    animation: {
                        duration: 1200,
                        easing: 'easeOutQuart'
                    }
                }
            });
        }
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardChart('month');
        });
    </script>
} 